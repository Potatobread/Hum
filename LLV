#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define T 20

typedef struct{
	char nome[15];
	int tam;
}tApp;

typedef struct{
	tApp info[T];
	int IL,IA,FL,FA;
}LLV;

void inicializarLLV(LLV *L){
	L->IL = 1;
	L->FL = -1; 
	L->IA = 0;
	L->FA = T;
	printf("Tudo OK em inicializarLLV\n\n");
}

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	printf("Tudo OK em carregar_Arquivos\n\n");
	fclose(leitura);
}

void organizar(tApp *aux){
	int i,j;
	tApp aux2;
	
	for(i=0;i<T;i++){
		for(j=0;j<T;j++){
			if(aux[i].tam < aux[j].tam && aux[i].tam != 0){
				aux2 = aux[i];
				aux[i] = aux[j];
				aux[j] = aux2;
			}
		}
	}
	printf("Tudo OK em 'organizar'\n\n");
}

void inserirLLV(LLV *L, tApp *old, int indic_orig){
	int i,j,k,local,controle=0,quant_elem;
	
	quant_elem = L->FL;
	if((old[indic_orig].tam < L->info[0].tam)||(L->IL != L->IA)){
		local = 1;
	}
	else{
		for(i=0;i<T;i++){
			if(L->info[i].tam > old[indic_orig].tam){
				local = 2;
				break;
			}
			local = 3;
		}
	}
	switch(local){
		case 1:
			if(!(L->IL == L->IA && L->FL == L->FA)){
				if(L->IL > L->IA){
					L->IL--;
					L->info[L->IL] = old[indic_orig];
					printf("Tudo OK em InserirLLV INICIO\n\n");
				}
				else{
					L->FL++;
					for(j=L->FL;j>=L->IL;j--){
						L->info[j+1] = L->info[j];
						printf("L->FL DENTRO DO FOR: %d\n", L->FL);
					}
					L->info[0] = old[indic_orig];
					printf("Entrou na parte do INSERIR NO INICIO DEPOIS DE INICIALIZADO\n\n");
					controle = 1;
				}
			}
			
			if(controle == 0){
				if(!(L->IL == L->IA && L->FL == L->FA)){
					if(L->FL != L->FA){
						L->FL++;
					}
					else{
						for(i=L->IL;i<=L->FL;i++){
							L->info[i-1] = L->info[i];
						}
						L->IL--;
					}
					L->info[L->FL] = old[indic_orig];
					printf("Tudo OK em InserirLLV FIM\n\n");
				}
			}	
			break;
		case 2:
			for(k=0;k<=quant_elem;k++){ // MEIO DA LISTA
				if(L->info[k].tam > old[indic_orig].tam){
					if(!(L->IL == L->IA && L->FL == L->FA)){
						for(i=0;i<=quant_elem;i++){
							if(L->info[i].tam > old[indic_orig].tam){
								break;
							}
						}
						if((L->FL-i) > (i-L->IL)){
							for(j=quant_elem;j>=i;j--){
								L->info[j+1] = L->info[j];
							}
							L->FL++;
							printf("MEIO QUANDO TEM MAIS GENTE PRA DIREITA\n");
							L->info[i] = old[indic_orig];
						}
						else{
							for(j = L->IL;j<i;j++){
								L->info[j-1] = L->info[j];
							}
							L->IL--;
						}
						return;
					}
				}
			}
			break;
		case 3:
			if(!(L->IL == L->IA && L->FL == L->FA)){
				if(L->FL != L->FA){
					L->FL++;
				}
				else{
					for(i = L->IL; i<=L->FL;i++){
						L->info[i-1] = L->info[i];
					}
					L->IL--;
					L->info[L->FL] = old[indic_orig];
				}
				L->info[L->FL] = old[indic_orig];
				printf("TUDO OK NA PARTE DE INSERIR NO FIM\n\n");
				break;
			}
		default:
			break;
	}	
}

int main(){
	int i,n;
	tApp aux[T];
	LLV s;
	
	for(i=0;i<T;i++){
		s.info[i].tam = 0;
		aux[i].tam = 0;
		strcpy(s.info[i].nome,"");
		strcpy(aux[i].nome,""); 
	}
	
	inicializarLLV(&s);
	carregar_Arquivos(&aux[0]);
	//organizar(&aux[0]);
	
	for(i=0;i<T;i++){
		if(aux[i].tam != 0){
			printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
		}
	}
	
	printf("\n");
	
	while(n != 100){
		printf("Digite o numero do App <100-Sair>: ");
		scanf(" %d", &n);
		inserirLLV(&s,&aux[0],n-1);
		for(i=0;i<T;i++){
			if(s.info[i].tam != 0){
				printf("%s %d\n",s.info[i].nome,s.info[i].tam);
			}
		}
		printf("\n");
	}
	
	for(i=0;i<T;i++){
		if(s.info[i].tam != 0){
			printf("%s %d\n",s.info[i].nome,s.info[i].tam);
		}
	}
			
	printf("\nTudo OK no MAIN\n");
	
	printf("IL: %d\n", s.IL);
	printf("FL: %d\n", s.FL);
	printf("IA: %d\n", s.IA);
	printf("FA: %d\n", s.FA);
	
	return 0;
}
