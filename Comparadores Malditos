package ordenacao;

import java.util.Random;

public class Main2 {
	
	static long compara;
	static long comparaMerge;
	static long comparaQuick;
	static long comparaHeap;
	
	public static void bubbleSort(int a[], int n) {
		long controle = 0;
		
		for(int i = 0; i < n; i++) {
			for(int j = n-1; j > i; j--) {
				compara++;
				if(a[j] < a[j - 1]) {
					int aux = a[j];
					a[j] = a[j - 1];
					a[j - 1] = aux;
					controle++;
				}
			}
		}
		if(controle > 0) compara = controle;
	}
	
	public static void insertionSort(int a[], int n) {
		compara = 0;
		long controle = 0;
		
		for(int i = 0; i < n; i++) {
			int aux = a[i];
			int j = i - 1;
			compara++;
			while(j >= 0 && aux < a[j]) {
				compara++;
				controle++;
				a[j + 1] = a[j];
				j--;
			}
			a[j + 1] = aux;
		}
		if(controle > 0) compara = controle;
	}
	
	//Conjunto mergeSort
	public static void merge(int a[],int p,int q,int r){
		int n1 = q - p + 1;
	    int n2 = r - q;
	    int left[] = new int[n1+1];
	    int right[] = new int[n2+1];
	       
	    int i = 0, j = 0, k = 0;
	       
	    for(i = 0; i < n1; i++)
	    	left[i] = a[p+i];
	    
	    for(j = 0; j < n2; j++)
	    	right[j] = a[q+j+1];
	    
	    left[n1]  = Integer.MAX_VALUE;
	    right[n2] = Integer.MAX_VALUE;
	    i = j = 0;
	       
	    for(k = p;k <= r; k++){
	    	comparaMerge++;
	    	if(left[i] <= right[j]){
	    		a[k] = left[i];
	    		i = i+1;
		    } else {
		    	a[k] = right[j];
		    	j = j+1;
		   }
	    }
	}    
	public static void mergeSort(int a[],int p,int r){
		comparaMerge++;
		if(p < r){
		    int q = (p+r)/2;
		    mergeSort(a,p,q);
		    mergeSort(a,q+1,r);
		    merge(a,p,q,r);
		}
	}
	
	
	//Conjunto quickSort
	public static int partition(int a[], int p, int r){
		int x = a[r];
		int i = p - 1;
		int aux;
		
		for(int j = p; j <= r-1; j++){
			comparaQuick++;
			if(a[j] <= x) {
				i += 1;
				aux = a[i];
				a[i] = a[j];
				a[j] = aux;
			}
		}
		aux = a[i + 1];
		a[i + 1] = a[r];
		a[r] = aux;
		
		return i+1;
	}
	public static void quickSort(int a[], int p, int r){
		comparaQuick++;
		if(p < r){
			int q = partition(a,p,r);
			quickSort(a,p,q-1);
			quickSort(a,q+1,r);
		}
	}
	
	public static void quickSortAlt(int a[], int p, int r) {	
		int i = p, j = r;
		int x = a[(p + r)/2];
		while(i <= j) {
			comparaQuick++;
			while(a[i] < x)
				i++;
			comparaQuick++;
			while(a[j] > x)
				j--;
			comparaQuick++;
			if(i <= j) {
				int aux = a[i];
				a[i] = a[j];
				a[j] = aux;
				i++;
				j--;
			}
		}
		comparaQuick++;
		if(p < j) quickSortAlt(a,p,j);
		comparaQuick++;
		if(r > i) quickSortAlt(a,i,r);
	}	
	
	
	//Conjunto heapSort
	public static int esquerda(int i){
		return 2*i + 1;
	}
	public static int direita(int i){
		return 2*i + 2;
	}
	public static void refazHeapMax(int a[], int i, int n){
		int maior;
		int e = esquerda(i);
		int d = direita(i);
		
		comparaHeap++;
		if(e <= n && a[e] > a[i])
			maior = e;
		else
			maior = i;
		
		comparaHeap++;
		if(d <= n && a[d] > a[maior])
			maior = d;
		
		comparaHeap++;
		if(maior != i){
			int aux = a[i];
			a[i] = a[maior];
			a[maior] = aux;
			refazHeapMax(a,maior,n);
		}
	}	
	public static void constroiHeapMax(int a[], int n){
		for(int i = (n/2); i >= 0; i--){
			refazHeapMax(a,i,n);
		}	
	}
	public static void heapSort(int a[]){
		constroiHeapMax(a, a.length-1);
		
		for(int i = a.length-1; i >= 0; i--){
			int aux = a[0];
			a[0] = a[i];
			a[i] = aux;
			refazHeapMax(a,0,i-1);
		}
	}
	
	
	public static void main(String[] args) {
		long begin,end;
		//a. 100; 	b. 500;	      c. 1.000;       d. 5.000;	      e. 30.000;	      f. 80.000;        g. 100.000;	      h. 150.000;       i. 200.000.
		
		//int tamanho[] = {100,500,1000,5000};//,30000};
		int tamanho[] = {10};
		
		
		for (int i = 0; i < 1; i++) {
			int crescente[] = new int[tamanho[i]];
			int decrescente[] = new int[tamanho[i]];
			int random[] = new int[tamanho[i]];
			
			Random gerador = new Random();
			for(int j = 0; j < tamanho[i]; j++) {
				crescente[j] = j + 1;
				decrescente[j] = tamanho[i] - j;
				random[j] = gerador.nextInt(101);
			}
			
			//comparaMerge = 0;
			//comparaQuick = 0;
			/*
			comparaHeap = 0;
			begin = System.currentTimeMillis();
			
			//mergeSort(crescente,0,crescente.length - 1);
			//quickSort(crescente,0,crescente.length - 1);
			heapSort(crescente);
			
			end = System.currentTimeMillis();
			System.out.print("\n-----CRESCENTE-----\tTAMANHO: " + tamanho[i] + "\n> Tempo de Execução(Milissegundos): " + (end - begin));
			//System.out.println("\n> Quantidade de Comparações_Crescente: " + comparaMerge);
			//System.out.println("\n> Quantidade de Comparações_Crescente: " + comparaQuick);
			System.out.println("\n> Quantidade de Comparações_Crescente: " + comparaHeap);
			*/
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//comparaMerge = 0;
			//comparaQuick = 0;
			comparaHeap = 0;
			begin = System.currentTimeMillis();
			
			//mergeSort(decrescente,0,decrescente.length - 1);
			//quickSort(decrescente,0,decrescente.length - 1);
			heapSort(decrescente);
			
			end = System.currentTimeMillis();
			System.out.print("\n-----DECRESCENTE-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			//System.out.println("\n> Quantidade de Comparações_Decrescente: " + comparaMerge);
			//System.out.println("\n> Quantidade de Comparações_Decrescente: " + comparaQuick);
			System.out.println("\n> Quantidade de Comparações_Decrescente: " + comparaHeap);
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			/*
			//comparaMerge = 0;
			//comparaQuick = 0;
			comparaHeap = 0;
			begin = System.currentTimeMillis();
			
			//mergeSort(random,0,random.length - 1);
			//quickSort(random,0,random.length - 1);
			heapSort(random);
			
			end = System.currentTimeMillis();
			System.out.print("\n-----ALEATORIO-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			//System.out.println("\n> Quantidade de Comparações_Aleatório: " + comparaMerge + "\n==========================================================");
		//System.out.println("\n> Quantidade de Comparações_Aleatório: " + comparaQuick + "\n==========================================================");
			System.out.println("\n> Quantidade de Comparações_Aleatório: " + comparaHeap + "\n==========================================================");
			*/
		}
		}
	}
