#include <stdio.h>
#include <stdlib.h>

typedef struct TipoNo{
 	int dado;
    struct TipoNo *anterior;
    struct TipoNo *proximo;
}TipoNo;

typedef struct{
	TipoNo *IL;
	TipoNo *FL;
}tLista;

TipoNo* alocaNo(){
    TipoNo *novo;
    novo = (TipoNo*)malloc(sizeof(TipoNo));
    if(novo == NULL){
        printf("\nMEMORIA INSUFICIENTE!\n");
        exit(1);
    }
    return novo;
}

tLista* criaLista(){
    tLista *l;
	l = (tLista*)malloc(sizeof(tLista));
	if(l == NULL){
        printf("\nMEMORIA INSUFICIENTE!\n");
        exit(1);
	}
	l->IL = NULL;
    l->FL = NULL;
    return l;
}

void inserirInicio(tLista *lista){
	TipoNo *novoElemento;
	
	novoElemento = alocaNo();
	novoElemento->dado = valor;
	
	if(lista->IL == NULL){
		novoElemento->anterior = NULL;
		novoElemento->proximo = NULL;
		lista->IL = novoElemento;
		lista->FL = novoElemento;
	}
	else{
		novoElemento->proximo = lista->IL;
		novoElemento->anterior = lista->IL->anterior;
		lista->IL = novoElemento;
	}
}

void inserirFim(LDE *lista){
	TipoNo *novoElemento;
	
	novoElemento = alocaNo();
	novoElemento->dado = valor;
	
	novoElemento->proximo = lista->FL->proximo;
	lista->FL->proximo = novoElemento;
	novoElemento->anterior = lista->FL;
	lista->FL = novoElemento;
}

void inserirMeio(LDE *lista){
	TipoNo *gancho,*novoElemento;
	
	novoElemento = alocaNo();
	novoElemento->dado = valor;	
	
	gancho = lista->IL;
	while(gancho->proximo != NULL){
		if(gancho->dado > valor){
			novoElemento->anterior = gancho->anterior;
			novoElemento->proximo = gancho->anterior->proximo;
			gancho->anterior->proximo = novoElemento;
			gancho->anterior = novoElemento;
			break;
		}
		gancho = gancho->proximo;
	}
}

int main(){
	tLista *listaDuplEncadeada;
	
	listaDuplEncadeada = criaLista();

	return 0;   	
}
