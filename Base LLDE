#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define T 20

typedef struct{
	char nome[20];
	int tam;
}tApp;

typedef struct{
	tApp info;
	int prox;
	int ant;
}No;

typedef struct{
	int disp;
	int IL;
	No v[T];
}LLDE;

typedef struct{
	int ind;
	int ind_LLDE;
}id;

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

void inicializarLLDE(LLDE *lis){
	int i;
	
	for(i=1;i<=T;i++){
		lis->v[i].prox = i+1;
		lis->v[i].ant = i-1;
	}
	lis->disp = 1;
	lis->IL = -1;
	lis->v[1].ant = -1;
	lis->v[T].prox = 0;
}


void inserirLLDE(LLDE *lis, tApp *old, int indic_orig, int *quant_elem){
	int local,ind,i,fim,meio,aux;
	
	if((lis->v[lis->IL].info.tam > old[indic_orig].tam)||(lis->disp == 1)){
		local = 1;
	}
	else{
		i = lis->IL;
		if(lis->v[i].prox == -1){
			local = 2;
		}
		else{
			while(lis->v[i].prox != -1){
				if(lis->v[i].info.tam > old[indic_orig].tam){
					printf("i: %d   LOCAL 3\n", i);
					local = 3;
					break;
				}
				i = lis->v[i].prox;
				printf("i: %d     LOCAL 2\n", i);
				local = 2;
				if(lis->v[i].info.tam > old[indic_orig].tam){
					printf("i: %d   LOCAL 3\n", i);
					local = 3;
					break;
				}
				printf("i: %d     LOCAL 2\n", i);
				local = 2;
			}
		}
	}	
	
	switch(local){
		case 1:
			printf("\nLOCAL: 1\n");
			if(!(lis->disp == -1)){
				if(lis->v[1].info.tam == 0){
					ind = lis->disp;
					lis->disp = lis->v[ind].prox;
					lis->v[ind].info = old[indic_orig];
					lis->v[ind].prox = lis->IL;
					lis->IL = ind;
				}
				else{
					printf("ENTROU ELSE\n");
					ind = lis->disp;
					lis->disp = lis->v[ind].prox;
					lis->v[ind].info = old[indic_orig];
					lis->v[ind].prox = lis->IL;
					lis->v[ind].ant = lis->v[lis->IL].ant;
					lis->v[lis->IL].ant = ind;
					lis->IL = ind;
					printf("ENTROU Ultimo ajuste e GG\n");
				}
			}
			printf("ENTRO NO INSERIR INICIO\n");
			break;
		case 2:
			printf("\nLOCAL: 2\n");
			if(!(lis->disp == -1)){
				printf("ENTRO NO INSERIR FIM\n");
				fim = lis->IL;
				while(lis->v[fim].prox != -1){
					fim = lis->v[fim].prox;
					printf("FIM: %d\n", fim);
				}
				ind = lis->disp;
				lis->disp = lis->v[ind].prox;
				lis->v[ind].ant = fim;
				lis->v[ind].prox = lis->v[fim].prox;
				lis->v[fim].prox = ind;
				lis->v[ind].info = old[indic_orig];
			}
			break;
		case 3:
			printf("\nLOCAL: 3\n");			
			if(!(lis->disp == -1)){
				printf("ENTRO NO INSERIR MEIO\n");				
				aux = lis->IL;
				while(lis->v[aux].prox != -1){
					if(lis->v[aux].info.tam > old[indic_orig].tam){
						break;
					}
					aux = lis->v[aux].prox;
				}
				meio = lis->IL;
				while(lis->v[meio].prox != aux){
					meio = lis->v[meio].prox;
				}
				ind = lis->disp;
				lis->disp = lis->v[ind].prox;
				lis->v[ind].prox = lis->v[meio].prox;
				lis->v[ind].ant = meio;
				lis->v[meio].prox = ind;
				lis->v[lis->v[meio].prox].ant = ind;
				lis->v[ind].info = old[indic_orig];
			}
			break;
		default:
			break;
	}
}


void removerLLDE(LLDE *lis, int remover, int *quant_elem){
	int i,ind,local,ind_ant,ind_prox,fim;
	
	if(remover == lis->IL){
		local = 1;
	}
	else{
		i = lis->IL;
		while(lis->v[i].prox != -1){
			i = lis->v[i].prox;
			if(lis->v[i].prox == -1){
				if(remover == i){
					local = 2;
				}
			}
			else{
				local = 3;
			}
		}
	}
	
	switch(local){
		case 1:
			ind = lis->IL;
			lis->IL = lis->v[ind].prox;
			lis->v[lis->IL].ant = lis->v[ind].ant;
			lis->v[ind].prox = lis->disp;	
			lis->disp = ind;
			printf("ENTROU REMOVER INICIO\n");
			break;
		case 2:
			fim = lis->IL;
			while(lis->v[fim].prox != -1){
				fim = lis->v[fim].prox;
			}
			ind_ant = lis->IL;
			while(lis->v[ind_ant].prox != fim){
				ind_ant = lis->v[ind_ant].prox;
			}
			lis->v[ind_ant].prox = lis->v[fim].prox;
			lis->v[fim].prox = lis->disp;
			lis->disp = fim;
			printf("ENTROU REMOVER FIM\n");
			break;
		case 3:
			ind_ant = lis->v[remover].ant;
			ind_prox = lis->v[remover].prox;
			lis->v[ind_ant].prox = ind_prox;
			lis->v[ind_prox].ant = ind_ant;
			lis->v[remover].prox = lis->disp;
			lis->disp = remover;
			printf("ENTROU REMOVER MEIO\n");
			break;
		default:
			break;
	}
}


int main(){
	int i,j,num,b=0;
	tApp aux[T];
	LLDE s;
	id v[T];
	
	for(i=0;i<T;i++){
		aux[i].tam = 0;
		s.v[i].info.tam = 0;
		v[i].ind = 0;
		v[i].ind_LLDE = 0;
		strcpy(aux[i].nome,"");  
		strcpy(s.v[i].info.nome,"");
	}
	
	carregar_Arquivos(&aux[0]);
	inicializarLLDE(&s);
	
	for(i=0;i<T;i++){
		if(aux[i].tam != 0){
			printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
		}
	}
	printf("\n");
	
	s.v[T].info.tam = 0;
	strcpy(s.v[T].info.nome,"");
  	for(i=1;i<=T;i++){
  		printf("%d - %s %d || ANT: %d  PROX: %d\n", i,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox);				
	}
	
	while(num != 100){
		printf("Digite o NUMERO <Sair - 100>: ");
		scanf(" %d", &num);
		if(num == 100){
			break;
		}
		inserirLLDE(&s,&aux[0],num-1,&b);
		printf("\n");
		
		i = s.IL;
		j = 0;
		for(j=0;j<T;j++){
			v[j].ind = j+1; 
		}
		j = 0;
		if(s.v[i].prox == -1){
			v[j].ind_LLDE = i;
			printf("%d - %s %d || ANT: %d  PROX: %d\n",v[j].ind,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox);
		}
		else{
			j = 0;
			while(s.v[i].prox != -1){
				v[j].ind_LLDE = i;
				printf("%d - %s %d || ANT: %d  PROX: %d\n",v[j].ind,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox);
				j++;
				i = s.v[i].prox;
				if(s.v[i].prox == -1){
					v[j].ind_LLDE = i;
					printf("%d - %s %d || ANT: %d  PROX: %d\n",v[j].ind,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox);
				}
			}
		}
		
		printf("\n");
		for(i=0;i<T;i++){
			if(aux[i].tam != 0){
				printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
			}
		}
		printf("\nIL: %d\n", s.IL);
		printf("Disp: %d\n", s.disp);
	}
	printf("\n\n");
	
	num = 0;
	while(num != 100){
		i = s.IL;
		j = 0;
		for(j=0;j<T;j++){
			v[j].ind = j+1; 
		}
		j = 0;
		if(s.v[i].prox == -1){
			v[j].ind_LLDE = i;
			printf("%d - %s %d || ANT: %d  PROX: %d   i:%d\n",v[j].ind,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox,v[j].ind_LLDE);
		}
		else{
			j = 0;
			while(s.v[i].prox != -1){
				v[j].ind_LLDE = i;
				printf("%d - %s %d || ANT: %d  PROX: %d   i:%d\n",v[j].ind,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox,v[j].ind_LLDE);
				j++;
				i = s.v[i].prox;
				if(s.v[i].prox == -1){
					v[j].ind_LLDE = i;
					printf("%d - %s %d || ANT: %d  PROX: %d   i:%d\n",v[j].ind,s.v[i].info.nome,s.v[i].info.tam,s.v[i].ant,s.v[i].prox,v[j].ind_LLDE);
				}
			}
		}
		printf("\nIL: %d\n", s.IL);
		printf("Disp: %d\n", s.disp);
		printf("\n");
		printf("Digite o NUMERO a EXCLUIR <Sair - 100>: ");
		scanf(" %d", &num);
		if(num == 100){
			break;
		}
		printf("\n");
		for(i=0;i<T;i++){
			printf("v[%d].ind = %d || v[%d].ind_LLDE = %d\n", i,v[i].ind,i,v[i].ind_LLDE);
		}
		printf("\n");
		for(i=0;i<T;i++){
			if(num == v[i].ind){
				num = v[i].ind_LLDE;
				printf("Num: %d || i: %d\n", num,i);
				break;
			}
		}
		removerLLDE(&s,num,&b);
		printf("\n");
	}

	return 0;
}
