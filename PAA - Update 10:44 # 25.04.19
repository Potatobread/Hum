package ordenacao;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;

public class Main {

	public static long bubbleSort(int a[], int n) {
		long count = 0;
		
		for(int i = 0; i < n; i++) {
			for(int j = n-1; j > i; j--) {
				if(a[j] < a[j - 1]) {
					int aux = a[j];
					a[j] = a[j - 1];
					a[j - 1] = aux;
					count++;
				}
			}
		}
		return count;
	}
	
	public static long insertionSort(int a[], int n) {
		int count = 0;
		
		for(int i = 0; i < n; i++) {
			int aux = a[i];
			int j = i - 1;
			while(j >= 0 && aux < a[j]) {
				a[j + 1] = a[j];
				j--;
				count++;
			}
			a[j + 1] = aux;
		}
		return count;
	}
	
	
	//Conjunto mergeSort
	public static void merge(int a[],int p,int q,int r){
		int n1 = q - p +1;
	    int n2 = r -q;
	    int left[] = new int[n1+1];
	    int right[] = new int[n2+1];
	       
	    int i = 0, j = 0, k = 0;
	       
	    for(i = 0; i < n1; i++){
	    	left[i] = a[p+i];
	    }
	    
	    for(j = 0; j < n2; j++){
	    	right[j] = a[q+j+1];
	    }
	    
	    left[n1]  = Integer.MAX_VALUE;
	    right[n2] = Integer.MAX_VALUE;
	    i = j = 0;
	       
	    for(k = p;k <= r; k++){
	    	if(left[i] <= right[j]){
	    		a[k] = left[i];
	    		i = i+1;
		    } else {
		    	a[k] = right[j];
		    	j = j+1;
		   }
	    }
	}    
	public static void mergeSort(int a[],int p,int r){
		if(p < r){
		    int q = (p+r)/2;
		    mergeSort(a,p,q);
		    mergeSort(a,q+1,r);
		    merge(a,p,q,r);
		}
	}
	
	
	public static int troca(int a, int b) {
		return a;
	}
	
	
	//Conjunto quickSort
	public static int partition(int a[], int p, int r){
		int x = a[r];
		int i = p - 1;
		
		for(int j = p; j <= r-1; j++){
			if(a[j] <= x){
				i++;
				a[i] = troca(a[j],a[j] = a[i]);
			}
		}
		a[i+1] = troca(a[r],a[r] = a[i+1]);
		
		return i+1;
	}
	public static void quickSort(int a[], int p, int r){
		if(p < r){
			int q = partition(a,p,r);	
			quickSort(a,p,q-1);			
			quickSort(a,q+1,r);			
		}
	}
	
	
	//Conjunto heapSort
	public static int esquerda(int i){
		return 2*i + 1;
	}
	public static int direita(int i){
		return 2*i + 2;
	}
	public static void refazHeapMax(int a[], int i, int n){
		int maior;
		int e = esquerda(i);
		int d = direita(i);
		
		if(e <= n && a[e] > a[i])
			maior = e;
		else
			maior = i;
		
		if(d <= n && a[d] > a[maior])
			maior = d;
		
		if(maior != i){
			a[i] = troca(a[maior],a[maior] = a[i]);
			refazHeapMax(a,maior,n);
		}
	}	
	public static void constroiHeapMax(int a[], int n){
		for(int i = (n/2); i >= 0; i--){
			refazHeapMax(a,i,n);
		}	
	}
	public static void heapSort(int a[]){
		constroiHeapMax(a, a.length-1);
		
		for(int i = a.length-1; i >= 0; i--){
			a[0] = troca(a[i],a[i] = a[0]);
			refazHeapMax(a,0,i-1);
		}
	}
	
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		System.out.print("Tamanho do Vetor: ");
		int n = scan.nextInt();
		long compRandom, compCrescente, compDecrescente;
		
		while(n != 0) {
			int crescente[] = new int[n];
			int decrescente[] = new int[n];
			int random[] = new int[n];
			
		
			Random gerador = new Random();
			for(int i = 0; i < n; i++) {
				crescente[i] = i + 1;
				decrescente[i] = n - i;
				random[i] = gerador.nextInt(101);
			}
			
			/*
			//ORDENAÇÃO PELO METODO BOLHA (bubbleSort);
						
			//ORDENA_CRESCENTE - Tempo e Comparações;
			long begin = System.currentTimeMillis();
			compCrescente = bubbleSort(crescente,n);
			long end = System.currentTimeMillis();
			
			System.out.print("\n-----CRESCENTE-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			System.out.println("\n> Quantidade de Comparações_Crescente: " + compCrescente);
			
			
			//ORDENA_DECRESCENTE - Tempo e Comparações;
			begin = System.currentTimeMillis();
			compDecrescente = bubbleSort(decrescente,n);
			end = System.currentTimeMillis();
			
			System.out.print("\n-----DECRESCENTE-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			System.out.println("\n> Quantidade de Comparações_Decrescente: " + compDecrescente);
			
			
			//ORDENA_ALEATORIO - Tempo e Comparações;
			begin = System.currentTimeMillis();
			compRandom = bubbleSort(random,n);
			end = System.currentTimeMillis();
			
			System.out.print("\n-----ALEATORIO-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			System.out.println("\n> Quantidade de Comparações_Aleatório: " + compRandom);
			*/
			
			
			//ORDENAÇÃO POR INSERÇÃO (insertionSort);
			
			//ORDENA_CRESCENTE - Tempo e Comparações;
			long begin = System.currentTimeMillis();
			compCrescente = insertionSort(crescente,n);
			long end = System.currentTimeMillis();
			
			System.out.print("\n-----CRESCENTE-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			System.out.println("\n> Quantidade de Comparações_Crescente: " + compCrescente);
			
			
			//ORDENA_DECRESCENTE - Tempo e Comparações;
			begin = System.currentTimeMillis();
			compDecrescente = insertionSort(decrescente,n);
			end = System.currentTimeMillis();
			
			System.out.print("\n-----DECRESCENTE-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			System.out.println("\n> Quantidade de Comparações_Decrescente: " + compDecrescente);
			
			
			//ORDENA_ALEATORIO - Tempo e Comparações;
			begin = System.currentTimeMillis();
			compRandom = insertionSort(random,n);
			end = System.currentTimeMillis();
			
			System.out.print("\n-----ALEATORIO-----\n> Tempo de Execução(Milissegundos): " + (end - begin));
			System.out.println("\n> Quantidade de Comparações_Aleatório: " + compRandom);
	      	
			
			//heapSort(random);
	        System.out.print("\n\nTamanho do Vetor: ");
			n = scan.nextInt();
		}
        
        
        //System.out.println("\nTempo em Milisegundos: "+ (fim - inicio));
        
        /*
    
		* PROBLEMAS:
			1° - Valor das comparações retorna da função quando muito grande, um valor negativo;
			2° - Conseguir encaixar um contador nas função recursivas > Merge, Quick e Heap;
	
	
        * TAMANHOS PEDIDOS PELO TIO:
        a. 100;
        b. 500;
        c. 1.000;
        d. 5.000;
        e. 30.000;
        f. 80.000;
        g. 100.000;
        h. 150.000;
        i. 200.000.
        */
    }
}
