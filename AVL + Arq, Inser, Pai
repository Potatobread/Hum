#include <stdio.h>
#include <stdlib.h>

typedef struct arv{
	int valor,altura;
	struct arv* esq;
	struct arv* dir;
}Avl;

typedef struct{
	int num;
	char cha;
}tApp;

Avl* Cria(){
	return NULL;
}

int altura(Avl* a){
	return a == NULL? 0 : a->altura; 
}

int max(int a, int b){
	return (a > b)? a : b;
}

Avl* rotacao_Esquerda(Avl* a){
	Avl* aux = a->dir;
	
	//ROTAÇÃO
	a->dir = aux->esq;
	aux->esq = a;
	
	return aux;
}

Avl* rotacao_Direita(Avl* a){
	Avl* aux = a->esq;
	
	//ROTAÇÃO
	a->esq = aux->dir;
	aux->dir = a;

	return aux;
}

int fatorBalanceamento(Avl* a){
	if(a == NULL)
		return 0;
	return altura(a->dir) - altura(a->esq);
}

Avl* inserir(Avl* a, int v){
	int fb;
	
	if(a == NULL){
    	a = (Avl*)malloc(sizeof(Avl)); 
    	a->valor = v; //  15
    	a->esq = a->dir = NULL; // NULL
    	a->altura = 1; // 1
	}
    else if(v < a->valor){
    	a->esq = inserir(a->esq,v);
    	//a->esq->pai = a;
	}	
    else if(v > a->valor){
    	a->dir = inserir(a->dir,v); // a-> = 10;
    	//a->dir->pai = a;
	} 	
    else
    	;
    
	a->altura = max(altura(a->esq),altura(a->dir)) + 1;
	
	fb = fatorBalanceamento(a);
	
	if(fb < -1 && v < a->esq->valor)
		return rotacao_Direita(a); // ROTAÇÃO PARA DIREITA
	else if(fb > 1 && v > a->dir->valor)
		return rotacao_Esquerda(a); // Rotação para Esquerda
	else if(fb < -1 && v > a->esq->valor){ // DUPLA RE
		a->esq = rotacao_Esquerda(a->esq);
		return rotacao_Direita(a);
	}
	else if(fb > 1 && v < a->dir->valor){ // DUPLA RD
		a->dir = rotacao_Direita(a->dir);
		return rotacao_Esquerda(a);
	}
	
	return a;	
}

void findMin(Avl* y){
    if(y->esq == NULL)
        printf("Menor valor presente na AVL: %d\n", y->valor);
    else
        findMin(y->esq);
}
 
void findMax(Avl* y){
    if(y->dir == NULL)
        printf("Maior valor presente na AVL: %d\n", y->valor);
    else
        findMax(y->dir);
}

Avl* identificaPai(Avl* a, int v){
	Avl* pai = NULL;
	
	if(a == NULL)
		return NULL;
	else{
		while(a->valor != v){ 
			pai = a;
			if(a->valor > v)
				a = a->esq;
    		else
    			a = a->dir;
		}	
    	return pai;
	}	
}

void imprime(Avl* a){
	if(a != NULL){
    	imprime(a->esq);
    	printf("%d(FB: %d)\n", a->valor,fatorBalanceamento(a));
    	imprime(a->dir);
	}
}

Avl* abb_busca(Avl* r, int v){
	if(r == NULL)
		return NULL;
  	else if(r->valor > v)
    	return abb_busca(r->esq,v);
    else if(r->valor < v)
    	return abb_busca(r->dir,v);
    else
    	return r;
}

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("Enem.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%d%c", &p[i].num,&p[i].cha))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

int main(){
	Avl* a;
	Avl* pai;
	int resp,i,x;
	tApp aux[10];
	
	a = pai = Cria();
	carregar_Arquivos(&aux[0]);
	for(i=0;i<9;i++){
		a = inserir(a,aux[i].num);
		printf("Inserindo: %d\n", aux[i].num);
		printf("%d: ", i+1);
		imprime(a);
		printf("\n\n");
	}
	
	printf("Digite o No: ");
	scanf("%d", &x);
	pai = identificaPai(a,x);
	printf("Pai do No %d: %d\n", x,pai->valor);
		
	
	/*
	printf("Numero: ");
	scanf("%d", &resp);
	while(resp != 0){
		a = inserir(a,resp);
		printf("Inserindo: %d || AVL : %d elementos\n", resp,i);
		printf("%d: ", i+1);
		i++;
		imprime(a);
		printf("\n\nNum: ");
		scanf("%d", &resp);
	}
	*/	
	return 0;
}
