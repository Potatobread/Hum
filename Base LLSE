#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define T 20

typedef struct{
	char nome[20];
	int tam;
}tApp;

typedef struct{
	tApp info;
	int prox;
}No;

typedef struct{
	int disp;
	int IL;
	No v[T];
}LLSE;

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

void inicializarLLSE(LLSE *lis){
	int i;
	
	for(i=1;i<T;i++){
		lis->v[i].prox = i+1;
	}
	lis->disp = 1;
	lis->v[T].prox = 0;	
}

void inserirLLSE(LLSE *lis, tApp *old, int indic_orig, int *quant_elem){
	int i,k,local,ind,novo,find;
	
	if((lis->v[lis->IL].info.tam > old[indic_orig].tam)||(lis->disp == 1)){
		local = 1;
	}
	else{
		i = lis->IL;
		if(lis->v[i].prox == -1){
			local = 2;
		}
		else{
			while(lis->v[i].prox != -1){
				if(lis->v[i].info.tam > old[indic_orig].tam){
					local = 3;
					break;
				}
				i = lis->v[i].prox;
				local = 2;
				if(lis->v[i].info.tam > old[indic_orig].tam){
					local = 3;
					break;
				}
				local = 2;
			}
		}
	}
	
	switch(local){
		case 1:
			if(!(lis->disp == -1)){
				ind = lis->disp;
				lis->v[ind].info = old[indic_orig];
				lis->disp = lis->v[ind].prox;
				if(*quant_elem != 0){
					lis->v[ind].prox = lis->IL;
					(*quant_elem)++;	
				}				
				else{
					lis->v[ind].prox = -1;
					(*quant_elem)++;
				}
				lis->IL = ind;
			}
			printf("ENTROU NO INSERIR INICIO\n");
			break;
		case 2:
			if(!(lis->disp == -1)){
				ind = lis->IL;
				while(lis->v[ind].prox != -1){
					ind = lis->v[ind].prox;
				}
				novo = lis->disp;
				lis->disp = lis->v[novo].prox;
				lis->v[novo].prox = lis->v[ind].prox;
				lis->v[ind].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++;
				printf("ENTROU NO INSERIR FIM\n");				
			}
			break;
		case 3:
			printf("ENTROU NO INSERIR MEIO\n");
            k = lis->IL;
			while(lis->v[k].prox != -1){
				if(lis->v[k].info.tam > old[indic_orig].tam){
					break;
				}
				k = lis->v[k].prox;
			}
			if(!(lis->disp == -1)){
				novo = lis->disp;
				lis->disp = lis->v[novo].prox;
				lis->v[novo].prox = k;
				find = lis->IL;
				while(lis->v[find].prox != k){
					find = lis->v[find].prox;
				}
				lis->v[find].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++; 
			}
			break;
		default:
			break;
	}	
}

void removerLLSE(LLSE *lis, int remover, int *quant_elem){
	int i,j,ind,local,ind_ant,ind_rem;
	
	if(remover == lis->IL){
		local = 1;
	}
	else{
		i = lis->IL;
		while(lis->v[i].prox != -1){
			i = lis->v[i].prox;
			if(lis->v[i].prox == -1){
				if(remover == i){
					local = 2;
				}
			}
			else{
				local = 3;
			}
		}
	}
	
	switch(local){
		case 1:
			if(!(lis->IL == -1)){
				ind = lis->IL;
				lis->IL = lis->v[ind].prox;
				lis->v[ind].prox = lis->disp;
				lis->disp = ind;
				printf("FEZ REMOVER INICIO\n");
			}	
			break;
		case 2:
			if(!(lis->IL == -1)){
				i = lis->IL;
				while(lis->v[i].prox != -1){
					i = lis->v[i].prox;
				}
				j = lis->IL;
				while(lis->v[j].prox != i){
					j = lis->v[j].prox;
				}
				ind = j;
				lis->v[lis->v[ind].prox].prox = lis->disp;
				lis->disp = lis->v[ind].prox;
				lis->v[ind].prox = -1;
				printf("FEZ REMOVER FIM\n");
			}	
			break;
		case 3:
			if(!(lis->IL == -1)){
				i = lis->IL;
				while(lis->v[i].prox != remover){
					i = lis->v[i].prox;
				}
				ind_ant = i;
				ind_rem = lis->v[ind_ant].prox;
				lis->v[ind_ant].prox = lis->v[ind_rem].prox;
				lis->v[ind_rem].prox = lis->disp;
				lis->disp = ind_rem;
				printf("FEZ REMOVER MEIO\n");
			}	
			break;
		default:
			break;
	}
}

void consultarStore(LLSE *lis){
	int i,j=1;
	
	for(i=lis->IL;i != -1; i = lis->v[i].prox){
		printf("%d. %s - Tamanho: %d mb\n", j, lis->v[i].info.nome,lis->v[i].info.tam);
		j++;
	}
}

int main(){
	int i,num=0,b=0,j,ind;
	tApp aux[T];
	LLSE s;
	
	for(i=0;i<T;i++){
		aux[i].tam = 0;
		s.v[i].info.tam = 0;
		strcpy(aux[i].nome,"");  
		strcpy(s.v[i].info.nome,"");
	}
	s.v[T].info.tam = 0;  
	strcpy(s.v[T].info.nome,"");
	
	carregar_Arquivos(&aux[0]);
	inicializarLLSE(&s);
	
	for(i=0;i<T;i++){
		if(aux[i].tam != 0){
			printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
		}
	}	
	printf("\n");
	
	while(ind != 100){
		printf("Digite o NUMERO <Sair - 100>: ");
		scanf(" %d", &ind);
		if(ind == 100){
			break;
		}
		inserirLLSE(&s,&aux[0],ind-1,&b);
		printf("\n");
		
		consultarStore(&s);
		
		printf("\n");
		for(i=0;i<T;i++){
			if(aux[i].tam != 0){
				printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
			}
		}
		printf("\nIL: %d\n", s.IL);
		printf("Disp: %d\n", s.disp);
	}
	printf("\n");
	
	ind = 0;
	while(ind != 100){
		consultarStore(&s);
		printf("\nIL: %d\n", s.IL);
		printf("Disp: %d\n", s.disp);
		printf("\n");
		printf("Digite o NUMERO a EXCLUIR <Sair - 100>: ");
		scanf(" %d", &ind);
		if(ind == 100){
			break;
		}
		printf("\n");
		num = s.IL;
		while(ind > 1){
			num = s.v[num].prox;
			ind--; 
			printf("ind: %d\n", ind);
		}
		removerLLSE(&s,num,&b);
	}
	
	return 0;
}
