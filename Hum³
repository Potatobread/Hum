#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define T 20

typedef struct TipoNo{
 	int dado;
    struct TipoNo *anterior;
    struct TipoNo *proximo;
}TipoNo;

typedef struct{
	TipoNo *IL;
	TipoNo *FL;
}tLista;

TipoNo* alocaNo(){
    TipoNo *novo;
    novo = (TipoNo*)malloc(sizeof(TipoNo));
    if(novo == NULL){
        printf("\nMEMORIA INSUFICIENTE!\n");
        exit(1);
    }
    return novo;
}

tLista* criaLista(){
    tLista *l;
	l = (tLista*)malloc(sizeof(tLista));
	if(l == NULL){
        printf("\nMEMORIA INSUFICIENTE!\n");
        exit(1);
	}
	l->IL = NULL;
    l->FL = NULL;
    printf("CRIOU LISTA\n\n");
    return l;
}

//void inserirLLDE(LLDE *lis, LLSE *old, int indic_orig, int *quant_elem){
void inserirLDE(tLista *lista, int num){
	int local;
	TipoNo *gancho,*novoElemento;
	
	if((lista->IL->dado > num)||(lista->IL == NULL)){
		local = 1;
		printf("\nLOCAL: %d\n\n", local);
	}
	else{
		gancho = lista->IL;
		if(gancho->proximo == NULL){
			 local = 2;
			 printf("\nLOCAL: %d\n\n", local);
		}
		else{
			while(gancho->proximo != NULL){
				if(gancho->dado > num){
					local = 3;
					printf("\nLOCAL: %d\n\n", local);
					break;
				}
				gancho = gancho->proximo;
				local = 2;
				if(gancho->dado > num){
					local = 3;
					printf("\nLOCAL: %d\n\n", local);
					break;
				}
				local = 2;
				printf("\nLOCAL: %d\n\n", local);
			}
		}
	}
	
	switch(local){
		case 1:
			novoElemento = alocaNo();
			if(lista->IL == NULL){ // Inserindo TipoNo Inicio na lista quando estÃ¡ vazia
				novoElemento->dado = num;
				novoElemento->anterior = NULL;
				novoElemento->proximo = NULL;
				lista->IL = novoElemento;
				lista->FL = novoElemento;
			}
			else{ // Inserindo Inicio quando ja com elementos
				novoElemento->dado = num;
				novoElemento->proximo = lista->IL;
				novoElemento->anterior = lista->IL->anterior;
				lista->IL = novoElemento;
			}
			break;
		case 2:
			novoElemento = alocaNo();
			novoElemento->dado = num;
			novoElemento->proximo = lista->FL->proximo;
			lista->FL->proximo = novoElemento;
			novoElemento->anterior = lista->FL;
			lista->FL = novoElemento;
			break;
		case 3:
			novoElemento = alocaNo();
			novoElemento->dado = num;
			
			gancho = lista->IL;
			while(gancho->proximo != NULL){
				if(gancho->dado > num){
					novoElemento->anterior = gancho->anterior;
					gancho->anterior = novoElemento;
					novoElemento->proximo = gancho->anterior->proximo;
					gancho->anterior->proximo = novoElemento;
					break;
				}
			}
			break;
		default:
			break;
	}
}

int main(){
	tLista *listaDuplEncadeada;
	TipoNo *gancho;
	int num;

	listaDuplEncadeada = criaLista();
		
	while(num != 100){
		printf("Digite um NUMERO <Sair - 100>: ");
		scanf(" %d", &num);
		if(num == 100){
			break;
		}
		inserirLDE(listaDuplEncadeada,num);
		
		gancho = listaDuplEncadeada->IL;
		while(gancho->proximo != NULL){
			printf("%d\n", gancho->dado);
			gancho = gancho->proximo;
		}
		printf("\n");
	}	

	return 0;   	
}
