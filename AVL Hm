#include <stdio.h>
#include <stdlib.h>

typedef struct arv{
	int valor,altura;
	struct arv* pai;
	struct arv* esq;
	struct arv* dir;
}Avl;

typedef struct{
	int num;
	char cha;
}tApp;

Avl* Cria(){
	return NULL;
}

int altura(Avl* a){
	if(a == NULL)
		return 0;
	
	return a->altura;
}

int max(int a, int b){
	return (a > b)? a : b;
}

Avl* rotacao_Esquerda(Avl* a){
	Avl* x = a->dir;
	Avl* aux = x->esq;
	
	//ROTAÇÃO
	x->esq = a;
	a->dir = aux;
	
	//ALTURA
	a->altura = max(altura(a->esq),altura(a->dir)) + 1;
	x->altura = max(altura(x->esq),altura(x->dir)) + 1;
	
	return x;
}

Avl* rotacaoEsquerda(Avl* a){
	Avl* x = a->dir;
	
	a->dir = x->esq;
	x->esq = a;
	
	return x;
}

Avl* rotacaoDireita(Avl* a){
	Avl* x = a->esq;
	
	a->esq = x->dir;
	x->dir = a;
	
	return x;
}

Avl* rotacao_Direita(Avl* a){
	Avl* x = a->esq;
	Avl* aux = x->dir;
	
	//ROTAÇÃO
	x->dir = a;
	a->esq = aux;
	
	//ALTURA
	a->altura = max(altura(a->esq),altura(a->dir)) + 1;
	x->altura = max(altura(x->esq),altura(x->dir)) + 1;
	
	return x;
}

Avl* rotacaoLR(Avl* a){
	a->esq = rotacao_Esquerda(a->esq);
	return rotacao_Direita(a);
}

Avl* rotacaoRL(Avl* a){
	a->dir = rotacao_Direita(a->dir);
	return rotacao_Esquerda(a);
}

int fatorBalanceamento(Avl* a){
	if(a == NULL)
		return 0;
	
	return altura(a->dir) - altura(a->esq);
}

Avl* inserir(Avl* a, int v){
	int fb;
	
	if(a == NULL){
    	a = (Avl*)malloc(sizeof(Avl));
    	a->valor = v;
    	a->pai = a->esq = a->dir = NULL;
    	a->altura = 1;
	}
    else if(v < a->valor)
    	a->esq = inserir(a->esq,v);
    else
    	a->dir = inserir(a->dir,v);
    
    
    a->altura = max(altura(a->esq),altura(a->dir)) + 1;
    
    fb = fatorBalanceamento(a);
	
	if(fb < -1 && v < a->esq->valor)
		return rotacaoDireita(a); // ROTAÇÃO PARA DIREITA
	else if(fb > 1 && v > a->dir->valor)
		return rotacaoEsquerda(a); // Rotação para Esquerda
	else if(fb < -1 && v > a->esq->valor) // DUPLA RE
		return rotacaoLR(a);
	else if(fb > 1 && v < a->dir->valor) // DUPLA RD
		return rotacaoRL(a);
	
	return a;	
}

/*
Avl* sucessor(Avl* raiz){
    if(raiz->d == NULL){
        while(raiz->p != NULL && raiz->p->chave < raiz->chave  )
            raiz = raiz->p;
        return raiz->p;
    }
 
    return minimo(raiz->d);
 
}
*/

/*
void imprime(Avl* a, int i, int space){
	static int pai,raiz;
	
	if(a != NULL){
		if(i == 0){
			printf("%d  (raiz   FB: %d)\n", a->valor,fatorBalanceamento(a));
			raiz = a->valor;
			i++;
			space += 5;
		}
		else{
			if(i == 1){
				printf("%*d  (pai: %d  FB: %d) || i : %d\n", space,a->valor,raiz,fatorBalanceamento(a),i);
				if(!(a->esq == a->dir)){
					pai = a->valor;
					i++;
					space += 5;	
				}
			}
			else{
				a = busca(a,raiz)
				
				printf("%*d  (pai: %d - FB: %d) || i : %d\n", space,a->valor,pai,fatorBalanceamento(a),i);
				if(!(a->esq == a->dir)){
					pai = a->valor;
					i++;
					space += 5;
				}
				else{
					i = 0;	
				}
			}
		}
		imprime(a->esq,i,space);
    	imprime(a->dir,i,space);
	}
}
*/

void imprime(Avl* a){
	if(a != NULL){
		printf("%d || Pai : %d  ", a->valor,a->pai);
    	imprime(a->esq);
    	imprime(a->dir);
	}
}

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("Enem.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%d%c", &p[i].num,&p[i].cha))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

int main(){
	Avl* a;
	int resp,i,cont=0,space = 6;
	tApp aux[15];
	
	a = Cria();
	carregar_Arquivos(&aux[0]);
	
	/*
	for(i=0;i<14;i++){
		printf("%d%c",aux[i].num,aux[i].cha);
	}
	printf("\n");
	*/
	
	for(i=0;i<14;i++){
		a = inserir(a,aux[i].num);
		printf("Inserindo: %d\n", aux[i].num);
		printf("%d: ", i+1);
		//imprime(a,cont,space);
		imprime(a);
		printf("\n\n");
	}
	
	/*
	i = 0;
	
	printf("Numero: ");
	scanf("%d", &resp);
	while(resp != 0){
		a = inserir(a,resp);
		printf("Inserindo: %d || AVL : %d elementos\n", resp,i);
		printf("%d: ", i+1);
		i++;
		imprime(a,cont,space);
		printf("\n\n");
		printf("Num: ");
		scanf("%d", &resp);
	}
	*/
		
	return 0;
}
