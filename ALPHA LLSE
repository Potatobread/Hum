#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <time.h>
#define L 3
#define C 3
#define T 20

typedef struct{
	char nome[20];
	int tam;
}tApp;

typedef struct{
	char nome[20];
}display;

typedef struct{
	tApp info;
	int prox;
}No;

typedef struct{
	int disp;
	int IL;
	No v[T];
}LLSE;

typedef struct{
	int ind;
}visual;

void inicializarLLSE(LLSE *lis){
	int i;
	
	for(i=1;i<T;i++){
		lis->v[i].prox = i+1;
	}
	lis->disp = 1;
	lis->v[T].prox = 0;	
}

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

void organizar(LLSE *lis, tApp *old, int indic_orig, int *quant_elem){
	int i,k,local,ind,novo,find;
	
	if((lis->v[lis->IL].info.tam > old[indic_orig].tam)||(lis->disp == 1)){
		local = 1;
	}
	else{
		i = lis->IL;
		if(lis->v[i].prox == -1){
			local = 2;
		}
		else{
			while(lis->v[i].prox != -1){
				if(lis->v[i].info.tam > old[indic_orig].tam){
					local = 3;
					break;
				}
				i = lis->v[i].prox;
				local = 2;
				if(lis->v[i].info.tam > old[indic_orig].tam){
					local = 3;
					break;
				}
				local = 2;
			}
		}
	}
	
	switch(local){
		case 1:
			if(!(lis->disp == -1)){
				ind = lis->disp;
				lis->v[ind].info = old[indic_orig];
				lis->disp = lis->v[ind].prox;
				if(*quant_elem != 0){
					lis->v[ind].prox = lis->IL;
					(*quant_elem)++;	
				}				
				else{
					lis->v[ind].prox = -1;
					(*quant_elem)++;
				}
				lis->IL = ind;
			}
			break;
		case 2:
			if(!(lis->disp == -1)){
				ind = lis->IL;
				while(lis->v[ind].prox != -1){
					ind = lis->v[ind].prox;
				}
				novo = lis->disp;
				lis->disp = lis->v[novo].prox;
				lis->v[novo].prox = lis->v[ind].prox;
				lis->v[ind].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++;
			}
			break;
		case 3:
            k = lis->IL;
			while(lis->v[k].prox != -1){
				if(lis->v[k].info.tam > old[indic_orig].tam){
					break;
				}
				k = lis->v[k].prox;
			}
			if(!(lis->disp == -1)){
				 novo = lis->disp;
				 lis->disp = lis->v[novo].prox;
				 lis->v[novo].prox = k;
				 find = lis->IL;
				 while(lis->v[find].prox != k){
					 find = lis->v[find].prox;
				 }
				 lis->v[find].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++; 
			}
			break;
		default:
			break;
	}	
}

void consultar(LLSE *lis){
	int i,num;
	
	i = lis->IL;
	num = 0;
	if(lis->v[i].prox == -1){
		num += 1;
		printf("%d. %s - Tamanho: %d mb", num, lis->v[i].info.nome,lis->v[i].info.tam);
	}
	else{
		num = 0;
		while(lis->v[i].prox != -1){
			num += 1;
			printf("%d. %s - Tamanho: %d mb", num, lis->v[i].info.nome,lis->v[i].info.tam);
			i = lis->v[i].prox;
			if(lis->v[i].prox == -1){
				num += 1;
				printf("%d. %s - Tamanho: %d mb", num, lis->v[i].info.nome,lis->v[i].info.tam);
			}
		}
	}
}

void consultarRum(LLSE *lis, int *indic){
	int i=1;
	
	if((lis->v[i].info.tam > 0) && (lis->v[i+1].info.tam > 0))
		printf("Apps em Execução:\n\n");
	else
		printf("App em Execução:\n\n");
	
	i = lis->IL;
	*indic = 0;
	if(lis->v[i].prox == -1){
		*indic += 1;
		printf("%d. %s - Consumo de Memória: %d mb\n", *indic, lis->v[i].info.nome,lis->v[i].info.tam);
	}
	else{
		*indic = 0;
		while(lis->v[i].prox != -1){
			*indic += 1;
			printf("%d. %s - Consumo de Memória: %d mb\n", *indic, lis.v[i].info.nome,lis.v[i].info.tam);
			i = lis->v[i].prox;
			if(lis->v[i].prox == -1){
				*indic += 1;
				printf("%d. %s - Consumo de Memória: %d mb\n", *indic, lis.v[i].info.nome,lis.v[i].info.tam);
			}
		}
	}
}

void inserirLLSE(LLSE *lis, LLSE *old, int indic_orig, int *quant_elem){
	int i,k,local,ind,novo,find;
	
	if((lis->v[lis->IL].info.tam > old->v[indic_orig].info.tam)||(lis->disp == 1)){
		local = 1;
	}
	else{
		i = lis->IL;
		if(lis->v[i].prox == -1){
			local = 2;
		}
		else{
			while(lis->v[i].prox != -1){
				if(lis->v[i].info.tam > old->v[indic_orig].info.tam){
					local = 3;
					break;
				}
				i = lis->v[i].prox;
				local = 2;
				if(lis->v[i].info.tam > old->v[indic_orig].info.tam){
					local = 3;
					break;
				}
				local = 2;
			}
		}
	}
	
	switch(local){
		case 1:
			if(!(lis->disp == -1)){
				ind = lis->disp;
				lis->v[ind].info = old[indic_orig];
				lis->disp = lis->v[ind].prox;
				if(*quant_elem != 0){
					lis->v[ind].prox = lis->IL;
					(*quant_elem)++;	
				}				
				else{
					lis->v[ind].prox = -1;
					(*quant_elem)++;
				}
				lis->IL = ind;
			}
			break;
		case 2:
			if(!(lis->disp == -1)){
				ind = lis->IL;
				while(lis->v[ind].prox != -1){
					ind = lis->v[ind].prox;
				}
				novo = lis->disp;
				lis->disp = lis->v[novo].prox;
				lis->v[novo].prox = lis->v[ind].prox;
				lis->v[ind].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++;
			}
			break;
		case 3:
            k = lis->IL;
			while(lis->v[k].prox != -1){
				if(lis->v[k].info.tam > old[indic_orig].tam){
					break;
				}
				k = lis->v[k].prox;
			}
			if(!(lis->disp == -1)){
				 novo = lis->disp;
				 lis->disp = lis->v[novo].prox;
				 lis->v[novo].prox = k;
				 find = lis->IL;
				 while(lis->v[find].prox != k){
					 find = lis->v[find].prox;
				}
				 lis->v[find].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++; 
			}
			break;
		default:
			break;
	}	
}


void removerLLV(LLV *v, int remover, int *quant_elem){
	int i,j,local;
	
	if(remover == 0){
		local = 1;
	}
	else{
		if(remover == v->FL){
			local = 2; 
		}	   	
		else{
			local = 3;
		}
	}	
	
	switch(local){
		case 1:
			if(!(v->IL == -1)){
				v->info[v->IL].tam = 0;
				strcpy(v->info[v->IL].nome,"");
				v->IL++;
				(*quant_elem)--;
			}
			break;
		case 2:
			if(!(v->IL == -1)){
				v->info[v->FL].tam = 0;
				strcpy(v->info[v->FL].nome,"");
				v->FL--;
				(*quant_elem)--;
			}
			break;
		case 3:
			for(i=0;i<v->FL;i++){
				if(v->info[i].tam == v->info[remover].tam){
					if(!(v->IL == -1)){
						for(j=i;j<v->FL;j++){
							v->info[j] = v->info[j+1];
						}
						v->info[v->FL].tam = 0;
						strcpy(v->info[v->FL].nome,"");
			   			v->FL--;
						(*quant_elem)--;
						return;
					}
				}
			}	
			break;
		default:
		   	break;
	}
}


void sleep(time_t delay){
	time_t timer0, timer1;
	
	time(&timer0);
	do{
		time(&timer1);
	}while((timer1-timer0)<delay);
}


void store(LLV *s, LLV *ins, int *cont_tam, int *quant_inst){
	system("cls");
	int resp,i,num,cont=0,tam_total=150,cont2=0;
	
	printf("Apps Disponíveis:\n\n");
	consultar(s);
	printf("\n");
	while(resp != 0){
		printf("Digite o número do App que deseja instalar: ");
		scanf("%d", &num);
		printf("\n");
		for(i=0;i<T;i++){
			if(s->info[i].tam != 0){
				cont2++;
			}
		}
		if(num > cont2){
			break;
		}
		for(i=0;i<T;i++){
			if(s->info[num-1].tam == ins->info[i].tam)
				cont = 1;
		}
		if(cont == 1){
			printf("Aplicativo já Instalado.\n");
			cont = 0;
		}
	   	else{
	   		*cont_tam += s->info[num-1].tam;
			if(*cont_tam > tam_total){
				printf("Espaço Insuficiente.\n");
				*cont_tam -= s->info[num-1].tam;
				return; 
			}
     		printf("App %s Instalado com sucesso.\n",s->info[num-1].nome);
     		printf("Memória: Atual: %d mb | MAX: 150 mb\n", *cont_tam);
			inserirLLV(ins,s,num-1,quant_inst);
		}
		printf("\n");
		printf("Deseja instalar outro App? <1-Continuar,0-Sair> ");
		scanf(" %d", &resp);
		if(resp > 1){
			printf("Opção Inválida\n");
			printf("\n");
			while(resp > 1){
				printf("Deseja instalar outro App? <1-Continuar,0-Sair> ");
				scanf(" %d", &resp);
				if(resp > 1){
					printf("Opção Inválida\n");
					printf("\n");
				}
			}	
		}
		system("cls");
		printf("Apps Disponíveis:\n\n");
		consultar(s);
		printf("\n");
	}
	system("cls");
}


void meusApps(LLV *ins, LLV *rum, int *quant_inst, int *cont_tam,int *cont_rum, int *quant_rum){
	system("cls");
	int num,i,cont,resp,resp2=2,tam_total = 50;
	int remover,indic;
	
	printf("---------------\n1 - Apps Instalados\n2 - Desinstalar App\n0 - Voltar\n---------------\n");
	scanf(" %d", &resp);
	while(resp != 0){
		switch(resp){
			case 0:
				return;
			case 1:
				system("cls");
				printf("Apps Instalados:\n\n");
				for(i=0;i<T;i++){
					if(ins->info[i].tam != 0){
						printf("%d - %s\n", i+1,ins->info[i].nome);
					}
				}
				printf("\n");
				while(resp2 != 0){
					printf("Digite o numero do App que deseja Executar: ");
					scanf(" %d", &num);
					if(num > *quant_inst){
						printf("Opção Inválida\n");
						printf("\n");
						while(num > *quant_inst){
							printf("Digite o numero do App que deseja Executar: ");
							scanf(" %d", &num);
							if(num > *quant_inst){
								printf("Opção Inválida\n");
								printf("\n");
							}
						}
					}
					for(i=0;i<T;i++){
						if(ins->info[num-1].tam == rum->info[i].tam)
							cont = 1;
					}
					if(cont == 1){
						printf("Aplicativo já em Execução.\n");
						cont = 0;
					}
					else{
						*cont_rum += (ins->info[num-1].tam/2);
						if(*cont_rum > tam_total){
							printf("Memória Insuficiente.\n");
							sleep(2);
							system("cls");
							return;
						}
						printf("App %s em Execução.\n", ins->info[num-1].nome);
						printf("Memória RAM: Atual: %d mb | MAX: 50 mb\n", *cont_rum);
						inserirLLV(rum,ins,num-1,quant_rum);
					}
					printf("\n");
					printf("Continuar - 1, Sair - 0: ");
					scanf(" %d", &resp2);
					if(resp2 == 0){
						break;
					}
					system("cls");
					printf("Apps Instalados:\n\n");
					for(i=0;i<T;i++){
						if(ins->info[i].tam != 0){
							printf("%d - %s\n", i+1,ins->info[i].nome);
						}
					}
					printf("\n");
				}
				system("cls");
				break;
			case 2:
				printf("\n");
				system("cls");
				printf("Desinstalar:\n\n");
				for(i=0;i<T;i++){
					if(ins->info[i].tam != 0){
						printf("%d - %s - Ocupando: %d mb\n", i+1,ins->info[i].nome,ins->info[i].tam);
						indic = i+1;
					}
				}
				printf("\n");
				printf("Memória: Atual: %d mb | MAX: 150 mb\n\n", *cont_tam);
				while(remover != 0){
					printf("Digite o número do App que deseja Desinstalar <0-Sair>: ");
					scanf(" %d", &remover);
					if(remover == 0){
						break;
					}
					if(remover > indic){
						printf("Opção Inválida\n");
						return;
					}
					for(i=0;i<T;i++){
						if(ins->info[remover-1].tam == rum->info[i].tam){
							printf("App em Execução.\n\n");
							printf("Digite o número do App que deseja Desinstalar <0-Sair>: ");
							scanf(" %d", &remover);
							if(remover == 0){
								break;
							}
						}
					}		
					*cont_tam -= ins->info[remover-1].tam;
					removerLLV(ins,remover-1,quant_inst);
					printf("\n");
					printf("Memória: Atual: %d mb | MAX: 150 mb\n\n", *cont_tam);
					sleep(2);
					system("cls");
					printf("Desinstalar:\n\n");
					for(i=0;i<T;i++){
						if(ins->info[i].tam != 0){
							printf("%d - %s - Ocupando: %d mb\n", i+1,ins->info[i].nome,ins->info[i].tam);
							indic = i+1;
						}
					}
					printf("\n");
					printf("Memória: Atual: %d mb | MAX: 150 mb\n\n", *cont_tam);
				}
				system("cls");
				break;
			default:
				printf("Opção Inválida\n");
				break;
		}
	   	printf("---------------\n1 - Apps Instalados\n2 - Desinstalar App\n0 - Voltar\n---------------\n");
		scanf(" %d", &resp);
	}
	system("cls");
}

	
void executando(LLV *rum, int *cont_rum, int *quant_rum){
	system("cls");
	int remover,indic;
			
	consultarRum(rum,&indic);
	while(remover != 0){
		printf("\n");
		printf("Memória RAM: Atual: %d mb | MAX: 50 mb.\n\n", *cont_rum);
		printf("Número do App a parar <0 - Sair>: ");
		scanf(" %d", &remover);
		if(remover == 0){
			system("cls");
			return;
		}
		if(remover > indic){
			printf("Opção Inválida\n");
			return;
		}
		*cont_rum -= (rum->info[remover-1].tam/2);
		removerLLV(rum,remover-1,quant_rum);
		printf("\n");
        printf("Memória RAM: Atual: %d mb | MAX: 50 mb.\n\n", *cont_rum);
        sleep(2);
        system("cls");
        consultarRum(rum,&indic);
	}
	system("cls");
}


void menuprin(LLV *s,LLV *ins,LLV *rum, int *cont_tam, int *cont_rum){
	system("cls");
	int resp,quant_inst=0,quant_rum=0;
	int i,j,a,k=0;
	display m[L][C];

	for(j=0;j<L;j++){
		for(i=0;i<C;i++){
			strcpy(m[j][i].nome,ins->info[k].nome);				
			k++; 
		}
	}
	for(j=0;j<L;j++){
		for(i=0;i<C;i++){
			if(i != C-1){
				a = strcmp(m[j][i].nome,"");
				if(a==0){
					printf("[%s     ] ____ ");
				}
				else{
					printf("[%s] ____ ", m[j][i].nome);
				}
			}
			else{
				a = strcmp(m[j][i].nome,"");
				if(a==0){
					printf("[     ]");
				}
				else{
					printf("[%s]", m[j][C-1].nome);
				}
			}			
		}
		printf("\n\n");
	}
	printf("==========================================\n");
	printf("[1.StoreED]  [2.MeusAppsED]  [3.AppRumED]\n");
	printf("==========================================\n");
	scanf(" %d", &resp);
	
	while(resp != 0){
		switch(resp){
			case 1:
				store(s,ins,cont_tam,&quant_inst);
				break;
			case 2:
				meusApps(ins,rum,&quant_inst,cont_tam,cont_rum,&quant_rum);
				break;
			case 3:
				executando(rum,cont_rum,&quant_rum);
				break;
			default:
				printf("Opção inválida!\n");
				sleep(1);
        		system("cls");
				break;
		};
		
		k=0;
		for(j=0;j<L;j++){
			for(i=0;i<C;i++){
				strcpy(m[j][i].nome,"");
			}
		}	   	
		for(j=0;j<L;j++){
			for(i=0;i<C;i++){
				if(k <= quant_inst){
					strcpy(m[j][i].nome,ins->info[k].nome);				
					k++;
				}
				else{
					strcpy(m[j][i].nome,"");
					break;
				}
			}
		}
		for(j=0;j<L;j++){
			for(i=0;i<C;i++){
				if(i != C-1){
					a = strcmp(m[j][i].nome,m[j-1][i-1].nome);
					if(a==0){
						strcpy(m[j][i].nome,"");
						printf("[%s] ____ ", m[j][i].nome);
					}
					else{
						printf("[%s] ____ ", m[j][i].nome);
					}
				}
				else{
					a = strcmp(m[j][i].nome,m[j-1][i-1].nome);
					if(a==0){
						strcpy(m[j][i].nome,"");
						printf("[%s]", m[j][i].nome);
					}
					else{
						printf("[%s]", m[j][i].nome);
					}
				}			
			}
			printf("\n\n");
		}
		
		printf("==========================================\n");
		printf("[1.StoreED]  [2.MeusAppsED]  [3.AppRumED]\n");
		printf("==========================================\n");
		scanf(" %d", &resp);
	}
}

int main(){
	int i,cont_tam=0,cont_rum=0,quant_store;
	setlocale(LC_ALL,"Portuguese");
	LLV apps_store,apps_instalados,apps_executando;
	tApp aux[T];
	
	for(i=0;i<T;i++){
		apps_store.info[i].tam = 0;
		apps_instalados.info[i].tam = 0;
		apps_executando.info[i].tam = 0;
		aux[i].tam = 0;
		strcpy(apps_store.info[i].nome,"");
		strcpy(apps_instalados.info[i].nome,"");
		strcpy(apps_executando.info[i].nome,"");
		strcpy(aux[i].nome,"");  
	}
	
	inicializarLLV(&apps_store);
	inicializarLLV(&apps_instalados);
	inicializarLLV(&apps_executando);
	
	carregar_Arquivos(&aux[0]);
	for(i=0;i<T;i++){
		if(aux[i].tam != 0){
			organizar(&apps_store,&aux[0],i,&quant_store);
		}
	}
	
	menuprin(&apps_store,&apps_instalados,&apps_executando,&cont_tam,&cont_rum);
	
	return 0;
}
