#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define T 20

typedef struct{
	char nome[20];
	int tam;
}tApp;

typedef struct{
	tApp info;
	int prox;
	int ant;
}No;

typedef struct{
	int disp;
	int IL;
	No v[T];
}LLDE;

typedef struct{
	int disp;
	int IL;
	No v[T];
}LLSE;

typedef struct{
	int ind;
	int ind_LL;
}id;

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

void inicializarLLSE(LLSE *lis){
	int i;
	
	for(i=1;i<T;i++){
		lis->v[i].prox = i+1;
	}
	lis->disp = 1;
	lis->v[T].prox = 0;	
}

void inicializarLLDE(LLDE *lis){
	int i;
	
	for(i=1;i<=T;i++){
		lis->v[i].prox = i+1;
		lis->v[i].ant = i-1;
	}
	lis->disp = 1;
	lis->IL = -1;
	lis->v[1].ant = -1;
	lis->v[T].prox = 0;
}

void inserirLLSE(LLSE *lis, tApp *old, int indic_orig, int *quant_elem){
	int i,k,local,ind,novo,find,cont;
	
	if((lis->v[lis->IL].info.tam > old[indic_orig].tam)||(lis->disp == 1)){
		local = 1;
	}
	else{
		i = lis->IL;
		if(lis->v[i].prox == -1){
			local = 2;
		}
		else{
			while(lis->v[i].prox != -1){
				if(lis->v[i].info.tam > old[indic_orig].tam){
					local = 3;
					break;
				}
				i = lis->v[i].prox;
				local = 2;
				if(lis->v[i].info.tam > old[indic_orig].tam){
					local = 3;
					break;
				}
				local = 2;
			}
		}
	}
	
	switch(local){
		case 1:
			if(!(lis->disp == -1)){
				ind = lis->disp;
				lis->disp = lis->v[ind].prox;
				lis->v[ind].info = old[indic_orig];
				if(*quant_elem != 0){
					lis->v[ind].prox = lis->IL;
					(*quant_elem)++;	
				}				
				else{
					lis->v[ind].prox = -1;
					(*quant_elem)++;
				}
				lis->IL = ind;
			}
			break;
		case 2:
			if(!(lis->disp == -1)){
				ind = lis->IL;
				while(lis->v[ind].prox != -1){
					ind = lis->v[ind].prox;
				}
				novo = lis->disp;
				lis->disp = lis->v[novo].prox;
				lis->v[novo].prox = lis->v[ind].prox;
				lis->v[ind].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++;				
			}
			break;
		case 3:
            k = lis->IL;
			while(lis->v[k].prox != -1){
				if(lis->v[k].info.tam > old[indic_orig].tam){
					break;
				}
				k = lis->v[k].prox;
			}
			if(!(lis->disp == -1)){
				 novo = lis->disp;
				 lis->disp = lis->v[novo].prox;
				 lis->v[novo].prox = k;
				 find = lis->IL;
				 while(lis->v[find].prox != k){
					 find = lis->v[find].prox;
				 }
				 lis->v[find].prox = novo;
				lis->v[novo].info = old[indic_orig];
				(*quant_elem)++; 
			}
			break;
		default:
			break;
	}	
}

void inserirLLDE(LLDE *lis, LLSE *old, int indic_orig, int *quant_elem){
	int local,ind,i,fim,meio,aux;
	
	if((lis->v[lis->IL].info.tam > old->v[indic_orig].info.tam)||(lis->disp == 1)){
		local = 1;
	}
	else{
		i = lis->IL;
		if(lis->v[i].prox == -1){
			local = 2;
		}
		else{
			while(lis->v[i].prox != -1){
				if(lis->v[i].info.tam > old->v[indic_orig].info.tam){
					local = 3;
					break;
				}
				i = lis->v[i].prox;
				local = 2;
				if(lis->v[i].info.tam > old->v[indic_orig].info.tam){
					local = 3;
					break;
				}
				local = 2;
			}
		}
	}	
	
	switch(local){
		case 1:
			if(!(lis->disp == -1)){
				if(lis->v[1].info.tam == 0){
					ind = lis->disp;
					lis->disp = lis->v[ind].prox;
					lis->v[ind].info = old->v[indic_orig].info;
					lis->v[ind].prox = lis->IL;
					lis->IL = ind;
					(*quant_elem)++;
				}
				else{
					ind = lis->disp;
					lis->disp = lis->v[ind].prox;
					lis->v[ind].info = old->v[indic_orig].info;
					lis->v[ind].prox = lis->IL;
					lis->v[ind].ant = lis->v[lis->IL].ant;
					lis->v[lis->IL].ant = ind;
					lis->IL = ind;
					(*quant_elem)++;
				}
			}
			break;
		case 2:
			if(!(lis->disp == -1)){
				fim = lis->IL;
				while(lis->v[fim].prox != -1){
					fim = lis->v[fim].prox;
				}
				ind = lis->disp;
				lis->disp = lis->v[ind].prox;
				lis->v[ind].ant = fim;
				lis->v[ind].prox = lis->v[fim].prox;
				lis->v[fim].prox = ind;
				lis->v[ind].info = old->v[indic_orig].info;
				(*quant_elem)++;
			}
			break;
		case 3:
			if(!(lis->disp == -1)){
				aux = lis->IL;
				while(lis->v[aux].prox != -1){
					if(lis->v[aux].info.tam > old->v[indic_orig].info.tam){
						break;
					}
					aux = lis->v[aux].prox;
				}
				meio = lis->v[aux].ant;
				ind = lis->disp;
				lis->disp = lis->v[ind].prox;
				lis->v[ind].prox = lis->v[meio].prox;
				lis->v[ind].ant = meio;
				lis->v[meio].prox = ind;
				lis->v[lis->v[meio].prox].ant = ind;
				lis->v[ind].info = old->v[indic_orig].info;
				(*quant_elem)++;
			}
			break;
		default:
			break;
	}
}

int main(){
	int i,j,b=0,num;
	tApp aux[T];
	LLSE s;
	LLDE ins;
	id v[T],a[T];
	
	for(i=0;i<T;i++){
		aux[i].tam = 0;
		s.v[i].info.tam = 0;
		ins.v[i].info.tam = 0;
		v[i].ind = 0;
		v[i].ind_LL = 0;
		a[i].ind = 0;
		strcpy(aux[i].nome,"");  
		strcpy(s.v[i].info.nome,"");
		strcpy(ins.v[i].info.nome,"");
	}
	
	carregar_Arquivos(&aux[0]);
	inicializarLLSE(&s);
	inicializarLLDE(&ins);
	for(i=0;i<T;i++){
		if(aux[i].tam != 0){
			printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
		}
	}
	printf("\n");
	s.v[T].info.tam = 0;  
	strcpy(s.v[T].info.nome,"");
	for(i=1;i<=T;i++)
		printf("%d - %s %d  PROX: %d\n", i,s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox);				
	
	while(num != 100){
		printf("Digite o NUMERO <Sair - 100>: ");
		scanf(" %d", &num);
		if(num == 100){
			break;
		}
		printf("ANTES DO INSERIR\n");
		inserirLLSE(&s,&aux[0],num-1,&b);
		printf("INSERIU NA LLSE\n");
		printf("\n");
		
		i = s.IL;
		j = 0;
		for(j=0;j<T;j++){
			v[j].ind = j+1; 
		}
		j = 0;
		if(s.v[i].prox == -1){
			v[j].ind_LL = i;
			printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
		}
		else{
			j = 0;
			while(s.v[i].prox != -1){
				v[j].ind_LL = i;
				printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
				j++;
				i = s.v[i].prox;
				if(s.v[i].prox == -1){
					v[j].ind_LL = i;
					printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
				}
			}
		}
		
		printf("\n");
		for(i=0;i<T;i++){
			if(aux[i].tam != 0){
				printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
			}
		}
		printf("\nIL: %d\n", s.IL);
		printf("Disp: %d\n", s.disp);
	}
	printf("\n");

	num = 0;
	
	i = s.IL;
	j = 0;
	for(j=0;j<T;j++){
		v[j].ind = j+1; 
	}
	j = 0;
	if(s.v[i].prox == -1){
		v[j].ind_LL = i;
		printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
	}
	else{
		j = 0;
		while(s.v[i].prox != -1){
			v[j].ind_LL = i;
			printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
			j++;
			i = s.v[i].prox;
			if(s.v[i].prox == -1){
				v[j].ind_LL = i;
				printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
			}
		}
	}
	printf("\n");
	while(num != 100){
		printf("Digite o NUMERO <Sair - 100>: ");
		scanf(" %d", &num);
		if(num == 100){
			break;
		}
		for(i=0;i<T;i++){
			if(num == v[i].ind){
				num = v[i].ind_LL;
			}
		}
		inserirLLDE(&ins,&s,num,&b);
		printf("\n");
		
		i = ins.IL;
		j = 0;
		for(j=0;j<T;j++){
			a[j].ind = j+1; 
		}
		j = 0;
		if(ins.v[i].prox == -1){
			a[j].ind_LL = i;
			printf("%d - %s %d || ANT: %d  PROX: %d\n",a[j].ind,ins.v[i].info.nome,ins.v[i].info.tam,ins.v[i].ant,ins.v[i].prox);
		}
		else{
			j = 0;
			while(ins.v[i].prox != -1){
				a[j].ind_LL = i;
				printf("%d - %s %d || ANT: %d  PROX: %d\n",a[j].ind,ins.v[i].info.nome,ins.v[i].info.tam,ins.v[i].ant,ins.v[i].prox);
				j++;
				i = ins.v[i].prox;
				if(ins.v[i].prox == -1){
					a[j].ind_LL = i;
					printf("%d - %s %d || ANT: %d  PROX: %d\n",a[j].ind,ins.v[i].info.nome,ins.v[i].info.tam,ins.v[i].ant,ins.v[i].prox);
				}
			}
		}
		printf("\n\n");
		i = s.IL;
		j = 0;
		for(j=0;j<T;j++){
			v[j].ind = j+1; 
		}
		j = 0;
		if(s.v[i].prox == -1){
			v[j].ind_LL = i;
			printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
		}
		else{
			j = 0;
			while(s.v[i].prox != -1){
				v[j].ind_LL = i;
				printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
				j++;
				i = s.v[i].prox;
				if(s.v[i].prox == -1){
					v[j].ind_LL = i;
					printf("%d - %s: %d  PROX: %d    i: %d\n", v[j].ind, s.v[i].info.nome,s.v[i].info.tam,s.v[i].prox,i);
				}
			}
		}
	}	
	
	return 0;
}
