#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//Define a estrutura do NO
typedef struct TipoNo{
	int info;
	struct TipoNo *proximo;
	struct TipoNo *anterior;
}TNo;

// Cria o inicio da Lista
typedef struct TipoLista{
	TNo *inicio = NULL;
	TNo *fim = NULL;
}TLista;

//Função que define a lista como vazia
void inicializaLista(TLista *pLista){
	pLista->inicio = NULL;
	pLista->fim = NULL;
}

//Função que insere um elemento no inicio da lista,mas sem 
// ordernação
void inserirNoInicio(TLista *pLista){
	TNo *novoElemento;
	
	novoElemento = new TNo;
	
	printf("Informe Valor: ");
	scanf("%d", &novoElemento->info);
	
	novoElemento->proximo = NULL;
	novoElemento->anterior = NULL;
	
	if(pLista->inicio == NULL){
		pLista->inicio = novoElemento;
		pLista->fim = novoElemento;
	}
	else{
		pLista->incio->anterior = novoElemento;
		novoElemento->proximo = pLista->inicio;
		pLista->inicio = novoElemento;
	}
}

void inserirNoFim(TLista *pLista){
	TNo *novoElemento;
	
	novoElemento = new TNo;
	
	printf("Informe Valor: ");
	scanf("%d", &novoElemento->info);
	
	novoElemento->proximo = NULL;
	novoElemento->anterior = NULL;
	
	if(pLista->inicio == NULL){
		pLista->inicio = novoElemento;
		pLista->fim = novoElemento;
	}
	else{
		pLista->fim->proximo = novoElemento;
		novoElemento->anterior = pLista->fim;
		pLista->fim = novoElemento;
	}
}

//Função que imprime toda a lista
void apresentarPeloInicio(TLista *pLista){
	TNo *aux;
	
	if(pLista->inicio == NULL){
		printf("--- LISTA VAZIA ---\n\n");
	}
	else{
		aux = pLista->inicio;
		while(aux != NULL){
			printf("Info = %d\n", aux->info);
			aux = aux->proximo;
		}
		printf("--- FIM DA LISTA ---\n\n);
	}
	getch()
}

void apresentarPeloFim(TLista *pLista){
	TNo *aux;
	if(pLista->fim == NULL){
		printf("--- LISTA VAZIA ---\n\n");
	}
	//Caso a lista nao esteja vazia
	aux = pLista->fim;
	while(aux != NULL){
		printf("Info = %d\n", aux->info);
		aux = aux->anterior;
	}
	printf("--- FIM DA LISTA ---\n\n");
	getch();
}

int remover_inicio(TLista *pLista){
	TNo *elem_atual, *elem_proximo, *elem_anterior;
	int dado;
	
	printf("Informe Numero a ser Removido: ");
	scanf("%d", &dado);
	
	if(pLista->inicio == NULL){
		return 0;  //Lista Vazia
	}
	else{
		//Caso a lista nao esteja vazia
		elem_atual = pLista->inicio;
		while(elem_atual != NULL){
			elem_proximo = elem_atual->proximo;
			elem_anterior = elem_atual->anterior;
			if(elem_atual->info == dado){ //Achou
				if(elem_anterior != NULL){
					if(elem_proximo != NULL){
						elem_anterior->proximo = elem_proximo;
						elem_proximo->anterior = elem_anterior;
						free(elem_atual);
						break;
					}
					else{
						elem_anterior->proximo = NULL; //elem_atual->proximo
						fim = elem_anterior;
						free(elem_atual);
						break;
					}
				}
				else{
					
				}
			}
		}
	}
}





































int main(){
	int op;
	TLista listaDuplEncadeada;
	
	inicializaLista(&listaDuplEncadeada);
	
	return 0;
}

