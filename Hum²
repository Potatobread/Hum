#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define T 20

typedef struct {
	char nome[20];
	int tam;
}tApp;

typedef struct No{
 	tApp dado;
    struct No *anterior;
    struct No *proximo;
}No;

typedef struct{
	No *IL;
	No *FL;
}tLista;

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

No* alocaNo(){
    No *novo;
    novo = (No *)malloc(sizeof(No));
    if(novo == NULL){
        printf("\nMEMORIA INSUFICIENTE!\n");
        exit(1);
    }
    return novo;
}

No* crialistaLDE(){
    tLista *l;
	*l = alocaNo();
	l->IL = NULL;
    l->FL = NULL;
    return l;
}

void inserirInicio(LDE *lista){
	LDE *novoElemento;
	
	novoElemento = alocaNo();
	novoElemento.info = valor;
	
	if(l->IL == NULL){
		novoElemento.info.ant = NULL;
		novoElemento.info.prox = NULL;
		lista->IL = novoElemento;
		lista->FL = novoElemento;
	}
	else{
		novoElemento.info.prox = lista->IL;
		novoElemento.info.ant = lista->IL.ant;
		lista->IL = novoElemento;
	}
}

void inserirFim(LDE *lista){
	LDE *novoELemento;
	
	novoELemento = alocaNo();
	novoELemento.info = "Dados";
	
	novoELemento.info.prox = lista->FL->prox;
	lista->FL->prox = novoElemento;
	novoELemento.info.ant = lista->FL;
	lista->FL = novoElemento;
}

void inserirMeio(LDE *lista){
	No *novoElemento;
	No *gancho;
	
	novoElemento = alocaNo();
	novoELemento.info = "Dados";	
	
	gancho = lista.IL;
	while(gancho.info.prox != NULL){
		if(gancho.info.dados > "Dados"){
			novoElemento.ant = gancho.ant;
			gancho.ant = novoElemento;
			novoElemento.info.prox = gancho.ant.prox;
			gancho.ant.prox = novoElemento; 
		}
	}
}

int main(){
	LDE listaDuplEncadeada;
	int i;
	tApp aux[T];
	
	for(i=0;i<T;i++){
		aux[i].tam = 0;
		strcpy(aux[i].nome,""); 
	}
	
	carregar_Arquivos(&aux[0]);
	crialistaLDE(&listaDuplEncadeada);
	
	for(i=0;i<T;i++){
		if(aux[i].tam != 0){
			printf("%d - %s %d\n", i+1,aux[i].nome,aux[i].tam);
		}
	}
	printf("\n\n");

	return 0;   	
}
