#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

typedef struct arv{
	int valor,altura;
	struct arv* esq;
	struct arv* dir;
}Avl;

typedef struct{
	int num;
	char caracter;
}tArquivo;

Avl* Cria(){
	return NULL;
}

int altura(Avl* a){
	return a == NULL? 0 : a->altura; 
}

int max(int a, int b){
	return (a > b)? a : b;
}

Avl* rotacionarEsquerda(Avl* a){
	Avl* aux = a->dir;
	
	//ROTAÇÃO
	a->dir = aux->esq;
	aux->esq = a;
	
	//ALTURA
	a->altura = max(altura(a->esq),altura(a->dir)) + 1;
	aux->altura = max(altura(aux->esq),altura(aux->dir)) + 1;
	
	return aux;
}

Avl* rotacionarDireita(Avl* a){
	Avl* aux = a->esq;
	
	//ROTAÇÃO
	a->esq = aux->dir;
	aux->dir = a;
	
	//ALTURA
	a->altura = max(altura(a->esq),altura(a->dir)) + 1;
	aux->altura = max(altura(aux->esq),altura(aux->dir)) + 1;
	
	return aux;
}

int fatorBalanceamento(Avl* a){
	return a == NULL? 0 : altura(a->dir) - altura(a->esq);
}

Avl* identificaPai(int v, Avl* a){
	Avl* pai = NULL;
	
	if(a != NULL){
		while(a->valor != v){ 
			pai = a;
			if(a->valor > v)
				a = a->esq;
			else
				a = a->dir;
		}	
		return pai;
	}	
	return NULL;
}

Avl* balanceamento(Avl* y){
    int	fb = fatorBalanceamento(y);
	
	if(fb > 1 && fatorBalanceamento(y->dir) >= 0) // ROT. ESQUERDA
		return rotacionarEsquerda(y);
   	else if(fb > 1 && fatorBalanceamento(y->dir) < 0){ // DUPLA ESQUERDA
   		y->dir = rotacionarDireita(y->dir);	
   		return rotacionarEsquerda(y);
	}
	else if(fb < -1 && fatorBalanceamento(y->esq) <= 0) // ROT. DIREITA
		return rotacionarDireita(y);
	else if(fb < -1 && fatorBalanceamento(y->esq) > 0){ // DUPLA DIREITA
		y->esq = rotacionarEsquerda(y->esq);
		return rotacionarDireita(y);
	}
	
	return y;
}

Avl* inserir(Avl* a, int v){
	if(a == NULL){
    	a = (Avl*)malloc(sizeof(Avl)); 
    	a->valor = v;
		a->esq = a->dir = NULL;
    	a->altura = 1;
	}
    else if(v < a->valor)
    	a->esq = inserir(a->esq,v);	
    else if(v > a->valor)
    	a->dir = inserir(a->dir,v); 	
    else
    	;
    
	a->altura = max(altura(a->esq),altura(a->dir)) + 1;
	
	return a = balanceamento(a);	
}

Avl* encontraMaior(Avl* a){
	return a->dir == NULL? a : encontraMaior(a->dir);
}

void imprimeNos(Avl* y, int alt){
	int fb;
	int cont,i;
	
	static int controle = 1; 
	if(y->dir != NULL){
		fb = fatorBalanceamento(y->dir);
		for(i=alt;i != 0; i--){
			printf("\t");
		}	
		printf("%d   (pai: %d - FB : %d)\n", y->dir->valor,y->valor,fb);
		printf("ALTURA : %d\n", alt);
		alt++;
		imprimeNos(y->dir,alt);
	}
	if(y->esq != NULL){
		fb = fatorBalanceamento(y->esq);
		for(i=alt;i != 0; i--){
			printf("\t");
		}	
		printf("%d   (pai: %d - FB : %d)\n", y->esq->valor,y->valor,fb);
		printf("ALTURA : %d\n", alt);
		if(controle == alt)
			alt++;
		imprimeNos(y->esq,alt);
	}
	alt = controle;
}
void identada(Avl* y){
	int fb = fatorBalanceamento(y),alt; 
	alt = y->altura - (y->altura - 1);
	printf("%d (raiz FB: %d)\n", y->valor,fb);
	imprimeNos(y,alt);
}

void localizaNo(int x, Avl* y){
	Avl* aux = y;
	while(y != NULL){
		if(x > y->valor)
			y = y->dir;
		else if(x < y->valor)
			y = y->esq;
		else{
			Avl* pai = identificaPai(x,aux);
			int fb = fatorBalanceamento(y);
			printf("No: %d (FB: %d)\n", y->valor,fb);
			if(pai != NULL){
				fb = fatorBalanceamento(pai);
				printf("\tPai: %d (FB: %d)\n", pai->valor,fb);
			}
			if(y->dir != NULL){
				fb = fatorBalanceamento(y->dir);
				printf("\tFilho a Direita: %d (FB: %d)\n", y->dir->valor,fb);				
			}
			if(y->esq != NULL){
				fb = fatorBalanceamento(y->esq);
				printf("\tFilho a Esquerda: %d (FB: %d)\n", y->esq->valor,fb);
			}
			return;
		}
	}
	printf("Elemento nao presente na AVL.\n");
}

Avl* excluiElemento(int x, Avl* y){
	if(y == NULL)
		return y;
	else{
		if(x < y->valor)
			y->esq = excluiElemento(x,y->esq);
		else if(x > y->valor)
			y->dir = excluiElemento(x,y->dir);
		else{
			if(y->esq == NULL && y->dir == NULL)
				return NULL;
			else if((y->esq == NULL) || (y->dir == NULL)){
				Avl* aux = NULL;
				if(y->esq == NULL){
					aux = y->dir;
					y->dir = aux->esq;
					y = aux;
					free(aux);
				}
				if(y->dir == NULL){
					aux = y->esq;
					y->esq = aux->dir;
					y = aux;
					free(aux);
				}
			}
			else{
				Avl* aux = encontraMaior(y->esq);
				y->valor = aux->valor;
				aux->valor = x;
				y->esq = excluiElemento(x,y->esq);
			}
		}
		y->altura = max(altura(y->esq),altura(y->dir)) + 1;
    		
		return y = balanceamento(y);		
	}	
}

void imprime(Avl* a){
	if(a != NULL){
    	imprime(a->esq);
    	printf("%d(FB: %d) ", a->valor,fatorBalanceamento(a));
    	imprime(a->dir);
	}
}

void imprimePre(Avl* a){
	if(a != NULL){
		printf("%d(FB: %d) || Altura: %d\n",a->valor,fatorBalanceamento(a),a->altura);
    	imprimePre(a->esq);
    	imprimePre(a->dir);
	}
}

void carregar_Arquivos(tArquivo *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("INPUT.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%d%c", &p[i].num,&p[i].caracter))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

int main(){
	setlocale(LC_ALL,"Portuguese");
	Avl* arvore;
	int resp,i,num;
	tArquivo aux[11];
	
	arvore = Cria();
	printf("--------------ARVORE AVL--------------\n");
	printf("1-Inserir\n2-Carregar arquivo INPUT.TXT\n3-Imprimir\n4-Localizar\n5-Excluir\n");
	printf("\nOpção: ");
	scanf("%d", &resp);
	while(resp != 0){
		switch(resp){
			case 0:
				break;
			case 1:
				printf("Digite o numero a Inserir: ");
				scanf("%d", &num);
				arvore = inserir(arvore,num);
				printf("Numero %d Inserido\n", num);
				break;
			case 2:
				carregar_Arquivos(&aux[0]);
				for(i=0;i<11;i++)
					arvore = inserir(arvore,aux[i].num);
				printf("Carregamento Concluído\n");
				break;
			case 3:
				printf("\n");
				imprimePre(arvore);
				//imprimePre(arvore);
				//identada(arvore);
				printf("\n");
				break;
			case 4:
				printf("Encontrar No: ");
				scanf("%d", &num);
				localizaNo(num,arvore);
				break;
			case 5:
				printf("Excluir No: ");
				scanf("%d", &num);
				arvore = excluiElemento(num,arvore);
				printf("\n");
				identada(arvore);
				printf("\n");
				break;
			default:
				printf("Opção Inválida\n");
				break;
		}
		printf("\n1-Inserir\n2-Carregar arquivo INPUT.TXT\n3-Imprimir\n4-Localizar\n5-Excluir\n");
		printf("\nOpção: ");
		scanf("%d", &resp);
	}
	
	return 0;
}
