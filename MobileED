#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <time.h>
#define L 3
#define C 3
#define T 20

typedef struct{
	char nome[20];
	int tam;
}tApp;

typedef struct{
	char nome[20];
}display;

void carregar_Arquivos(tApp *p){
	FILE *leitura;
	int i=0;
	
	leitura = fopen("MobileED.txt", "r");
	
	if(leitura == NULL){
		printf("Erro ao abrir o arquivo.\n");
		exit(0);
	}
	else{
		while((fscanf(leitura,"%s %d\n", &p[i].nome,&p[i].tam))!= EOF){
			i++;
		}
	}
	
	fclose(leitura);
}

void organizar(tApp *v){
	int i,j;
	tApp aux;
	
	for(i=0;i<T;i++){
		for(j=0;j<T;j++){
			if(v[i].tam < v[j].tam && v[i].tam != 0){
				aux = v[i];
				v[i] = v[j];
				v[j] = aux;
			}
		}
	}		
}

void consultar(tApp *v){
	int i;
	
	for(i=0;i<T;i++){
		if(v[i].tam != 0){
			printf("%d. %s - Tamanho: %d mb\n", i+1,v[i].nome,v[i].tam);
		}
	}
}

void consultarRum(tApp *v, int *indic){
	int i=0;
	
	if((v[i].tam > 0) && (v[i+1].tam > 0))
		printf("Apps em Execução:\n\n");
	else
		printf("App em Execução:\n\n");
	
	for(i=0;i<T;i++){
		if(v[i].tam != 0){
			printf("%d. %s - Consumo de Memória: %d mb\n", i+1, v[i].nome, (v[i].tam/2));
			*indic = i+1;
		}
	}
}

void inserirElemento(tApp *inicio, tApp *final, int indic_orig, int *quant_elem){
	int i,j;

    if(*quant_elem==0){
    	final[0] = inicio[indic_orig];
    	(*quant_elem)++;
    	return;
    }

    for(i=0;i<(*quant_elem);i++){
		if(final[i].tam > inicio[indic_orig].tam){
			break;
		}
	}
    	
    for(j=(*quant_elem);j>i;j--){
		final[j] = final[j-1];
	}
    	
    final[i] = inicio[indic_orig];
    (*quant_elem)++;
}

void removerElemento(tApp *v, int remover, int *quant_elem){
    int i,j;
    
    for(i=0;i<(*quant_elem);i++){
        if(v[i].tam == v[remover].tam){
            break;
        }
	}    
    
    for(j=i+1;j<(*quant_elem);j++){
		v[j-1] = v[j];
	}
       
	v[*quant_elem-1].tam = 0;
	strcpy(v[*quant_elem-1].nome,"");    
    (*quant_elem)--;
}

void sleep(time_t delay){
	time_t timer0, timer1;
	
	time(&timer0);
	do{
		time(&timer1);
	}while((timer1-timer0)<delay);
}


void store(tApp *s, tApp *ins, int *cont_tam, int *quant_inst){
	system("cls");
	int resp,i,num,cont=0,tam_total=150,cont2=0;
	
	printf("Apps Disponíveis:\n\n");
	consultar(s);
	printf("\n");
	while(resp != 0){
		printf("Digite o número do App que deseja instalar: ");
		scanf("%d", &num);
		printf("\n");
		for(i=0;i<T;i++){
			if(s[i].tam != 0){
				cont2++;
			}
		}
		if(num > cont2){
			break;
		}
		for(i=0;i<T;i++){
			if(s[num-1].tam == ins[i].tam)
				cont = 1;
		}
		if(cont == 1){
			printf("Aplicativo já Instalado.\n");
			cont = 0;
		}
	   	else{
	   		*cont_tam += s[num-1].tam;
			if(*cont_tam>tam_total){
				printf("Espaço Insuficiente.\n");
				*cont_tam -= s[num-1].tam;
				return; 
			}
     		printf("App %s Instalado com sucesso.\n",s[num-1].nome);
     		printf("Memória: Atual: %d mb | MAX: 150 mb\n", *cont_tam);
			inserirElemento(s,ins,num-1,quant_inst);
		}
		printf("\n");
		printf("Deseja instalar outro App? <1-Continuar,0-Sair> ");
		scanf(" %d", &resp);
		if(resp > 1){
			printf("Opção Inválida\n");
			printf("\n");
			while(resp > 1){
				printf("Deseja instalar outro App? <1-Continuar,0-Sair> ");
				scanf(" %d", &resp);
				if(resp > 1){
					printf("Opção Inválida\n");
					printf("\n");
				}
			}	
		}
		system("cls");
		printf("Apps Disponíveis:\n\n");
		consultar(s);
		printf("\n");
	}
	system("cls");
}


void meusApps(tApp *ins, tApp *rum, int *quant_inst, int *cont_tam,int *cont_rum, int *quant_rum){
	system("cls");
	int num,i,cont,resp,resp2=2,tam_total = 50;
	int remover,indic;
	
	printf("---------------\n1 - Apps Instalados\n2 - Desinstalar App\n0 - Voltar\n---------------\n");
	scanf(" %d", &resp);
	while(resp != 0){
		switch(resp){
			case 0:
				return;
			case 1:
				system("cls");
				printf("Apps Instalados:\n\n");
				for(i=0;i<T;i++){
					if(ins[i].tam != 0){
						printf("%d - %s\n", i+1,ins[i].nome);
					}
				}
				printf("\n");
				while(resp2 != 0){
					printf("Digite o numero do App que deseja Executar: ");
					scanf(" %d", &num);
					if(num > *quant_inst){
						printf("Opção Inválida\n");
						printf("\n");
						while(num > *quant_inst){
							printf("Digite o numero do App que deseja Executar: ");
							scanf(" %d", &num);
							if(num > *quant_inst){
								printf("Opção Inválida\n");
								printf("\n");
							}
						}
					}
					for(i=0;i<T;i++){
						if(ins[num-1].tam == rum[i].tam)
							cont = 1;
					}
					if(cont == 1){
						printf("Aplicativo já em Execução.\n");
						cont = 0;
					}
					else{
						*cont_rum += (ins[num-1].tam/2);
						if(*cont_rum > tam_total){
							printf("Memória Insuficiente.\n");
							return;
						}
						printf("App %s em Execução.\n", ins[num-1].nome);
						printf("Memória RAM: Atual: %d mb | MAX: 50 mb\n", *cont_rum);
						inserirElemento(ins,rum,num-1,quant_rum);
					}
					printf("\n");
					printf("Continuar - 1, Sair - 0: ");
					scanf(" %d", &resp2);
					if(resp2 == 0){
						break;
					}
					system("cls");
					printf("Apps Instalados:\n\n");
					for(i=0;i<T;i++){
						if(ins[i].tam != 0){
							printf("%d - %s\n", i+1,ins[i].nome);
						}
					}
					printf("\n");
				}
				system("cls");
				break;
			case 2:
				printf("\n");
				system("cls");
				printf("Desinstalar:\n\n");
				for(i=0;i<T;i++){
					if(ins[i].tam != 0){
						printf("%d - %s - Ocupando: %d mb\n", i+1,ins[i].nome,ins[i].tam);
						indic = i+1;
					}
				}
				printf("\n");
				printf("Memória: Atual: %d mb | MAX: 150 mb\n\n", *cont_tam);
				while(remover != 0){
					printf("Digite o número do App que deseja Desinstalar <0-Sair>: ");
					scanf(" %d", &remover);
					if(remover == 0){
						break;
					}
					if(remover > indic){
						printf("Opção Inválida\n");
						return;
					}
					for(i=0;i<T;i++){
						if(ins[remover-1].tam == rum[i].tam){
							printf("App em Execução.\n\n");
							printf("Digite o número do App que deseja Desinstalar <0-Sair>: ");
							scanf(" %d", &remover);
							if(remover == 0){
								break;
							}
						}
					}		
					*cont_tam -= ins[remover-1].tam;
					removerElemento(ins,remover-1,quant_inst);
					printf("\n");
					printf("Memória: Atual: %d mb | MAX: 150 mb\n\n", *cont_tam);
					sleep(2);
					system("cls");
					printf("Desinstalar:\n\n");
					for(i=0;i<T;i++){
						if(ins[i].tam != 0){
							printf("%d - %s - Ocupando: %d mb\n", i+1,ins[i].nome,ins[i].tam);
							indic = i+1;
						}
					}
					printf("\n");
					printf("Memória: Atual: %d mb | MAX: 150 mb\n\n", *cont_tam);
				}
				system("cls");
				break;
			default:
				printf("Opção Inválida\n");
				break;
		}
	   	printf("---------------\n1 - Apps Instalados\n2 - Desinstalar App\n0 - Voltar\n---------------\n");
		scanf(" %d", &resp);
	}
	system("cls");
}

	
void executando(tApp *rum, int *cont_rum, int *quant_rum){
	system("cls");
	int resp,remover,indic;
			
	consultarRum(rum,&indic);
	while(resp != 0){
		printf("\n");
		printf("Memória RAM: Atual: %d mb | MAX: 50 mb.\n\n", *cont_rum);
		printf("Número do App a parar: ");
		scanf(" %d", &remover);
		if(remover > indic){
			printf("Opção Inválida\n");
			return;
		}
		*cont_rum -= (rum[remover-1].tam/2);
		removerElemento(rum,remover-1,quant_rum);
		printf("\n");
        printf("Memória RAM: Atual: %d mb | MAX: 50 mb.\n\n", *cont_rum);
		printf("Sair - 0\n");
		scanf(" %d", &resp);
		system("cls");
		consultarRum(rum,&indic);
	}
	system("cls");
}


void menuprin(tApp *s,tApp *ins,tApp *rum, int *cont_tam, int *cont_rum){
	system("cls");
	int resp,quant_inst=0,quant_rum=0;
	int i,j,a,k=0;
	display m[L][C];
	

	for(j=0;j<L;j++){
		for(i=0;i<C;i++){
			strcpy(m[j][i].nome,ins[k].nome);				
			k++; 
		}
	}
	for(j=0;j<L;j++){
		for(i=0;i<C;i++){
			if(i != C-1){
				a = strcmp(m[j][i].nome,"");
				if(a==0){
					printf("[%s     ] ____ ");
				}
				else{
					printf("[%s] ____ ", m[j][i].nome);
				}
			}
			else{
				a = strcmp(m[j][i].nome,"");
				if(a==0){
					printf("[     ]");
				}
				else{
					printf("[%s]", m[j][C-1].nome);
				}
			}			
		}
		printf("\n\n");
	}
	
	printf("==========================================\n");
	printf("[1.StoreED]  [2.MeusAppsED]  [3.AppRumED]\n");
	scanf(" %d", &resp);
	while(resp != 0){
		switch(resp){
			case 1:
				store(s,ins,cont_tam,&quant_inst);
				break;
			case 2:
				meusApps(ins,rum,&quant_inst,cont_tam,cont_rum,&quant_rum);
				break;
			case 3:
				executando(rum,cont_rum,&quant_rum);
				break;
			default:
				printf("Opção inválida!\n");
				break;
		};
		
		k=0;
		for(j=0;j<L;j++){
			for(i=0;i<C;i++){
				strcpy(m[j][i].nome,"");
			}
		}	   	
		for(j=0;j<L;j++){
			for(i=0;i<C;i++){
				if(k < quant_inst){
					strcpy(m[j][i].nome,ins[k].nome);				
					k++;
				}
				else{
					strcpy(m[j][i].nome,"");
					break;
				}
			}
		}
		for(j=0;j<L;j++){
			for(i=0;i<C;i++){
				if(i != C-1){
					a = strcmp(m[j][i].nome,m[j-1][i-1].nome);
					if(a==0){
						strcpy(m[j][i].nome,"");
						printf("[%s] ____ ", m[j][i].nome);
					}
					else{
						printf("[%s] ____ ", m[j][i].nome);
					}
				}
				else{
					a = strcmp(m[j][i].nome,m[j-1][i-1].nome);
					if(a==0){
						strcpy(m[j][i].nome,"");
						printf("[%s]", m[j][i].nome);
					}
					else{
						printf("[%s]", m[j][i].nome);
					}
				}			
			}
			printf("\n\n");
		}
		
		printf("==========================================\n");
		printf("[1.StoreED]  [2.MeusAppsED]  [3.AppRumED]\n");
		scanf(" %d", &resp);
	}
}

int main(){
	int i,cont_tam=0,cont_rum=0;
	setlocale(LC_ALL,"Portuguese");
	tApp apps_store[T],apps_instalados[T],apps_executando[T];
	
	for(i=0;i<T;i++){
		apps_store[i].tam = 0;
		apps_instalados[i].tam = 0;
		apps_executando[i].tam = 0;
		strcpy(apps_store[i].nome,"");
		strcpy(apps_instalados[i].nome,"");
		strcpy(apps_executando[i].nome,""); 
	}
	
	carregar_Arquivos(&apps_store[0]);
	organizar(&apps_store[0]);
	
	menuprin(&apps_store[0],&apps_instalados[0],&apps_executando[0],&cont_tam,&cont_rum);
	
	return 0;
}
